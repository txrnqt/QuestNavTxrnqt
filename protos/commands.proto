syntax = "proto3";

/**
 * QuestNav Commands Protocol Buffer Definitions
 * 
 * This file defines the command system for QuestNav, which allows external systems
 * (such as robot code) to send commands to the Quest headset for various operations.
 * The command system is designed to be extensible, allowing new command types to be
 * added without breaking existing implementations.
 * 
 * Key Features:
 * - Asynchronous command execution with response tracking
 * - Extensible command type system
 * - Type-safe payload system using oneof
 * - Error handling and status reporting
 * 
 * Usage Flow:
 * 1. Client sends ProtobufQuestNavCommand with unique command_id
 * 2. QuestNav processes the command asynchronously
 * 3. QuestNav sends back ProtobufQuestNavCommandResponse with matching command_id
 */

package questnav.protos.commands;
option csharp_namespace = "QuestNav.Protos.Generated";
option java_package = "gg.questnav.questnav.protos.generated";

// Import geometry messages for pose-related commands
import "geometry3d.proto";

/**
 * Enumeration of available command types in the QuestNav system.
 * 
 * This enum defines all the different types of commands that can be sent to
 * the Quest headset. The enum is designed to be extensible - new command types
 * can be added without breaking existing clients.
 * 
 * Design Notes:
 * - Values start from 0 as required by proto3
 * - UNSPECIFIED value (0) is reserved for error handling
 * - Command values should be assigned incrementally for clarity
 */
enum QuestNavCommandType {
  COMMAND_TYPE_UNSPECIFIED = 0;  // Default/invalid command type (required by proto3)
  
  /**
   * POSE_RESET: Resets the robot's pose estimation to a specified target pose.
   * 
   * This command is used to correct drift in the tracking system by setting
   * the robot's position and orientation to known values. Typically used when
   * the robot is placed at a known location on the field.
   * 
   * Requires: ProtobufQuestNavPoseResetPayload
   */
  POSE_RESET = 1;
  
  // Future commands can be added here with incremental values:
  // CALIBRATION_START = 2;
  // TRACKING_MODE_CHANGE = 3;
  // etc.
}

/**
 * Payload message for the POSE_RESET command.
 * 
 * This message contains the data needed to execute a pose reset operation.
 * The pose reset command allows external systems to correct the Quest's
 * understanding of the robot's position and orientation on the field.
 * 
 * Coordinate System:
 * - Uses WPILib field-relative coordinate system
 * - X-axis: Forward (towards opposing alliance)
 * - Y-axis: Left (when facing forward)
 * - Z-axis: Up
 * - Yaw (Z): Counter-clockwise (right-handed) rotation around the Z axis
 * - Pitch (Y): Counter-clockwise (right-handed) rotation around Y axis
 * - Roll (X): Counter-clockwise (right-handed) rotation around the X axis
 * - Rotation: Counter-clockwise positive (right-hand coordinate system)
 * - Origin: Typically at one corner of the field (see field layout documentation)
 */
message ProtobufQuestNavPoseResetPayload {
  /**
   * The target pose to reset the robot to.
   * 
   * This should represent the robot's actual position and orientation on the field
   * in the WPILib coordinate system. The Quest will update its internal tracking
   * to match this pose, effectively correcting any accumulated drift.
   * 
   * Units:
   * - Translation: meters
   * - Rotation: radians
   */
  wpi.proto.ProtobufPose3d target_pose = 1;
}

/**
 * Main command message sent to the QuestNav system.
 * 
 * This is the primary message type used to send commands from external systems
 * (like robot code) to the Quest headset. Each command includes a type identifier,
 * a unique tracking ID, and optional payload data specific to the command type.
 * 
 * The command system is designed for asynchronous operation - commands are sent
 * and responses are received separately, matched by the command_id field.
 * 
 * Message Flow:
 * 1. Client creates command with unique command_id
 * 2. Client sets appropriate type and payload
 * 3. Client sends command to Quest
 * 4. Quest processes command and sends response with matching command_id
 */
message ProtobufQuestNavCommand {
  /**
   * The type of command being sent.
   * 
   * This field determines which payload (if any) should be populated and
   * how the Quest should process the command. See QuestNavCommandType
   * enum for available command types.
   */
  QuestNavCommandType type = 1;

  /**
   * Unique identifier for this command instance.
   * 
   * This ID is used to match commands with their responses in asynchronous
   * communication. The client should generate unique IDs for each command
   * to avoid confusion. The Quest will echo this ID in the response message.
   * 
   * Recommended: Use incrementing integers or timestamps for uniqueness.
   * 
   * Note: For FRC users, the vendor dependency will handle this automatically.
   */
  uint32 command_id = 2;

  /**
   * Command-specific payload data.
   * 
   * This oneof field contains the specific data needed for each command type.
   * Only one payload field will be set, corresponding to the command type.
   * Commands that don't require additional data don't need a payload entry.
   * 
   * Field numbering starts at 10 to leave room for future common fields.
   */
  oneof payload {
    /**
     * Payload for POSE_RESET commands.
     * Set this field when type = POSE_RESET.
     */
    ProtobufQuestNavPoseResetPayload pose_reset_payload = 10;
    
    // Future payloads can be added here:
    // ProtobufQuestNavCalibrationPayload calibration_payload = 11;
    // ProtobufQuestNavTrackingModePayload tracking_mode_payload = 12;
    // etc.
    // 
    // Note: Commands with no payload don't need an entry in this oneof
  }
}

/**
 * Response message sent back after processing a command.
 * 
 * This message is sent by the Quest back to the client after processing
 * a ProtobufQuestNavCommand. It provides status information about whether
 * the command was executed successfully and any error details if it failed.
 * 
 * The response is matched to the original command using the command_id field,
 * allowing for proper asynchronous command handling even when multiple
 * commands are in flight simultaneously.
 * 
 * Response Timing:
 * - Responses are sent after command processing completes
 * - Some commands may take time to execute (e.g., pose reset with validation)
 * - Clients should implement timeouts for command responses
 * 
 * Note: For FRC users, the vendor dependency will handle response matching automatically.
 */
message ProtobufQuestNavCommandResponse {
  /**
   * Command ID that matches the original command.
   * 
   * This field echoes the command_id from the original ProtobufQuestNavCommand
   * that this response corresponds to. Clients use this to match responses
   * with their original commands in asynchronous communication.
   */
  uint32 command_id = 1;

  /**
   * Indicates whether the command was executed successfully.
   * 
   * true:  Command completed successfully
   * false: Command failed (see error_message for details)
   * 
   * Note: A successful response means the command was processed, but doesn't
   * necessarily guarantee the desired outcome (e.g., pose reset might succeed
   * but tracking could still be poor due to environmental conditions).
   */
  bool success = 2;

  /**
   * Human-readable error message when success = false.
   * 
   * This field provides detailed information about why a command failed.
   * It should be empty or ignored when success = true.
   * 
   * Error messages are intended for debugging and logging purposes.
   * They may include technical details about the failure cause.
   * 
   * Examples:
   * - "Invalid pose coordinates: x value out of field bounds"
   * - "Tracking system not initialized"
   * - "Unknown command type"
   */
  string error_message = 3;
}