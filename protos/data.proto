syntax = "proto3";

/**
 * QuestNav Data Protocol Buffer Definitions
 * 
 * This file defines the data structures used for transmitting tracking and device
 * information from the Quest headset to external systems (such as robot code).
 * The data is organized into two main categories with different update frequencies:
 * 
 * 1. Frame Data: High-frequency tracking information (pose, timestamps)
 * 2. Device Data: Lower-frequency device status information (battery, tracking state)
 * 
 * This separation allows for efficient bandwidth usage by sending critical tracking
 * data frequently while sending less critical device status data at a lower rate.
 * 
 * Data Flow:
 * - Quest continuously processes camera/sensor data
 * - Frame data is sent every 10 milliseconds (100 Hz)
 * - Device data is sent every 333 milliseconds (3 Hz)
 * - External systems receive and process this data for robot localization
 */

package questnav.protos.data;
option csharp_namespace = "QuestNav.Protos.Generated";
option java_package = "gg.questnav.questnav.protos.generated";

// Import geometry messages for pose representation
import "geometry3d.proto";

/**
 * High-frequency tracking data sent from Quest to external systems.
 * 
 * This message contains the core tracking information that external systems
 * (like robot code) need for real-time localization and navigation. It's sent
 * at 100 Hz (every 10 milliseconds) to provide smooth, responsive tracking.
 * 
 * The data represents the Quest's position and orientation on the field,
 * derived from visual-inertial odometry using the Quest's cameras and IMU sensors.
 * 
 * Coordinate System:
 * - Uses WPILib field-relative coordinate system
 * - Origin and axes depend on field setup and calibration
 * - Pose represents the Quest's position; mounting offset to get robot position
 *   is applied in end user code
 */
message ProtobufQuestNavFrameData {
  /**
   * Sequential frame counter for this tracking session.
   * 
   * This counter increments with each frame processed by the Quest's tracking
   * system. It can be used to:
   * - Detect dropped messages
   * - Calculate effective frame rate
   * - Synchronize with other data streams
   * 
   * The counter resets to 0 when the QuestNav app starts and increments
   * continuously during operation. Frame drops in transmission will create
   * gaps in the sequence.
   */
  int32 frame_count = 1;
  
  /**
   * Timestamp in seconds since QuestNav app startup.
   * 
   * This provides timing information for the tracking data, allowing external
   * systems to:
   * - Calculate data age and latency
   * - Interpolate or extrapolate poses for prediction
   * - Synchronize with other sensor data
   * - Implement timeout detection
   * 
   * The timestamp is relative to app startup, not system time, to avoid
   * clock synchronization issues between devices.
   * 
   * Resolution: Typically sub-millisecond precision
   */
  double timestamp = 2;
  
  /**
   * Quest's 3D pose on the field in WPILib coordinates.
   * 
   * This represents the Quest's position and orientation as determined by
   * the Quest's tracking system. The pose accounts for:
   * - Coordinate system transformation to WPILib standard
   * - Any calibration offsets applied
   * 
   * Note: This is the Quest's position; end user code applies mounting offset
   * to get the robot's position.
   * 
   * Coordinate System Details:
   * - X: Forward direction (towards opposing alliance)
   * - Y: Left direction (when facing forward)
   * - Z: Up direction
   * - Yaw (Z): Counter-clockwise (right-handed) rotation around the Z axis
   * - Pitch (Y): Counter-clockwise (right-handed) rotation around Y axis
   * - Roll (X): Counter-clockwise (right-handed) rotation around the X axis
   * - Units: meters for translation, radians for rotation
   * 
   * Accuracy depends on:
   * - Environmental lighting and features
   * - Quest tracking quality
   * - Calibration accuracy
   * - Time since last pose reset
   */
  wpi.proto.ProtobufPose3d pose3d = 3;
}

/**
 * Lower-frequency device status data sent from Quest to external systems.
 * 
 * This message contains device health and status information that doesn't need
 * to be sent as frequently as tracking data. It's sent at 3 Hz (every 333 milliseconds)
 * to provide monitoring and diagnostic information without consuming excessive
 * bandwidth.
 * 
 * This data helps external systems:
 * - Monitor Quest device health
 * - Detect tracking system issues
 * - Implement failsafe behaviors
 * - Provide user feedback about system status
 * 
 * The information is useful for both autonomous operation and debugging/
 * troubleshooting scenarios.
 */
message ProtobufQuestNavDeviceData {
  /**
   * Count of tracking loss events since app startup.
   * 
   * This counter increments each time the Quest's tracking system loses
   * tracking after having established it. Tracking loss can occur due to:
   * - Poor lighting conditions
   * - Lack of visual features in environment
   * - Rapid motion or acceleration
   * - Occlusion of cameras
   * - Hardware issues
   * 
   * A high or rapidly increasing counter may indicate:
   * - Environmental issues (lighting, features)
   * - Quest mounting problems (vibration, obstruction)
   * - Hardware degradation
   * 
   * This metric helps assess tracking system reliability and can trigger
   * alerts or fallback behaviors in robot code.
   */
  int32 tracking_lost_counter = 1;
  
  /**
   * Current tracking status of the Quest device.
   * 
   * true:  Quest is actively tracking and pose data is reliable
   * false: Quest has lost tracking and pose data should not be trusted
   * 
   * When tracking is lost:
   * - Pose data becomes stale and unreliable
   * - Robot should switch to alternative localization methods
   * - Movement should be limited or stopped for safety
   * 
   * Tracking can be recovered by:
   * - Improving lighting conditions
   * - Moving to area with more visual features
   * - Reducing motion to allow system to re-initialize
   * - Performing pose reset when tracking recovers
   * 
   * External systems should monitor this field and implement appropriate
   * fallback behaviors when tracking is lost.
   */
  bool currently_tracking = 2;
  
  /**
   * Quest device battery level as a percentage (0-100).
   * 
   * This provides the current battery charge level of the Quest headset,
   * allowing external systems to:
   * - Monitor power status during operation
   * - Implement low-battery warnings or behaviors
   * - Plan operation duration and charging needs
   * - Trigger graceful shutdown procedures
   * 
   * Battery Level Guidelines:
   * - 100%: Fully charged
   * - 50-100%: Normal operation
   * - 20-50%: Consider charging soon
   * - 10-20%: Low battery warning recommended
   * - 0-10%: Critical - plan immediate shutdown/charging
   * 
   * Note: Battery drain rate depends on:
   * - Processing load (tracking complexity)
   * - Display usage (if any)
   * - Wireless communication activity
   * - Environmental temperature
   */
  int32 battery_percent = 3;
}