{
  "README.html": {
    "href": "README.html",
    "title": "QuestNav DocFX API Documentation | QuestNav API Documentation",
    "summary": "QuestNav DocFX API Documentation This directory contains the DocFX configuration for generating C# API documentation from the QuestNav Unity project. Overview DocFX automatically generates comprehensive API documentation from XML documentation comments in the C# source code. The generated documentation is integrated into the main Docusaurus site at /api/csharp/. Files docfx.json - DocFX configuration file index.md - Homepage for the API documentation build-docs.sh - Linux/macOS build script build-docs.ps1 - Windows PowerShell build script api/ - Generated YAML metadata files (auto-generated) Local Development Prerequisites Install .NET SDK 8.0 or later Install DocFX: dotnet tool install -g docfx Building Documentation Windows (PowerShell): cd unity/DocFX .\\build-docs.ps1 Linux/macOS: cd unity/DocFX chmod +x build-docs.sh ./build-docs.sh Manual Commands: cd unity/DocFX docfx metadata # Generate API metadata docfx build # Build HTML documentation Preview Documentation After building, the documentation is available at: Local files: docs/static/api/csharp/index.html Docusaurus dev server: http://localhost:3000/api/csharp/ (run npm start in docs/) CI/CD Integration GitHub Actions Workflow The DocFX documentation is generated through coordinated workflows with proper dependency management: 1. Main Build Workflow (test-build.yml) Triggers on: Push to main or pull requests Calls: Unity build workflow which automatically triggers DocFX generation 2. Unity Build Workflow (build-questnav-apk.yml) Preserves XML Documentation: After Unity builds, copies QuestNav.xml from Library/ScriptAssemblies/ to DocFX/preserved-xml/ Uploads XML Artifact: Stores the XML file as a workflow artifact for later use Prevents Cleanup: Ensures XML documentation survives Unity's build cleanup process Calls DocFX Workflow: Automatically triggers DocFX generation after successful Unity build 3. DocFX Build Workflow (build-docfx-api.yml) Triggers via: Called by Unity build workflow (automatic after Unity builds) Manual workflow dispatch (with force-build option) Standalone docs workflow (for DocFX config changes only) Process: Sets up .NET and DocFX Restores Unity NuGet packages Checks for preserved XML: Looks for XML documentation in preserved-xml/ directory Fails if no XML: Reports failure when XML documentation is not available (unless force-build=true) Copies XML to expected location for DocFX processing Generates API metadata from C# project (only if XML available) Builds HTML documentation Cleans up XML files: Removes preserved and working XML files to prevent stale builds Commits updated docs back to repository Uploads artifacts for review Output: Updates docs/static/api/csharp/ with latest API docs Automatically triggers Docusaurus deployment Provides PR comments with build status 4. Standalone Docs Workflow (build-docs-standalone.yml) Triggers on: Changes to unity/DocFX/** files only Purpose: Updates documentation when only DocFX configuration changes Behavior: Uses existing preserved XML documentation Integration with Docusaurus The generated documentation integrates seamlessly with the main Docusaurus site: Static files are placed in docs/static/api/csharp/ Served automatically by Docusaurus at /api/csharp/ Search functionality included with full-text search Responsive design matches Docusaurus theme XML Documentation Lifecycle Automatic XML Management QuestNav implements automatic XML documentation lifecycle management to ensure documentation is always built from fresh, up-to-date XML: Generation: Unity builds generate QuestNav.xml in Library/ScriptAssemblies/ Preservation: Unity workflow copies XML to DocFX/preserved-xml/ to survive build cleanup Consumption: DocFX workflow uses preserved XML to generate documentation Cleanup: After successful DocFX build, XML files are automatically removed Regeneration: Next Unity build creates fresh XML for subsequent documentation builds Why XML Cleanup Matters Prevents Stale Documentation: Ensures docs always reflect current code state Forces Fresh Builds: Requires new Unity compilation for documentation updates Avoids Inconsistencies: Eliminates risk of outdated XML generating incorrect docs Clear Dependencies: Makes Unity â†’ DocFX dependency explicit and enforceable Configuration DocFX Settings Key configuration in docfx.json: { \"metadata\": [{ \"src\": [{\"files\": [\"QuestNav.csproj\"], \"src\": \"../\"}], \"dest\": \"api\", \"includePrivateMembers\": false, \"namespaceLayout\": \"flattened\" }], \"build\": { \"output\": \"../../docs/static/api/csharp\", \"template\": [\"default\"] } } Customization To customize the documentation: Styling: Modify templates in DocFX or override CSS in Docusaurus Content: Update XML documentation comments in C# source files Structure: Modify docfx.json configuration Integration: Update Docusaurus navigation to link to API docs Namespaces Covered The documentation includes all public APIs from: QuestNav.Core - Main application logic and constants QuestNav.Commands - Command processing system QuestNav.Network - NetworkTables communication QuestNav.UI - User interface management QuestNav.Utils - Utility functions and extensions QuestNav.Native.NTCore - Native NetworkTables bindings QuestNav.Protos.Generated - Protocol buffer generated classes Troubleshooting Common Issues Build Failures: Ensure .NET SDK 8.0+ is installed Check that Unity project compiles successfully Verify NuGet packages are restored Missing Documentation: Add XML documentation comments to C# source files Enable XML documentation generation in Unity project settings Check that QuestNav.xml is generated in Library/ScriptAssemblies/ Verify XML file is preserved in DocFX/preserved-xml/ after Unity builds Note: XML files are automatically cleaned up after successful DocFX builds to prevent stale documentation Broken Links: Verify relative paths in index.md Check that Docusaurus serves files from static/ directory Ensure cross-references use correct namespace names Manual Debugging # Check DocFX version docfx --version # Verbose build output docfx build --logLevel Verbose # Serve locally for testing docfx serve docs/static/api/csharp --port 8080 Contributing When adding new C# APIs: Add XML documentation comments to all public members Follow conventions for parameter descriptions and examples Test locally by running the build scripts Verify output in the generated documentation The documentation will automatically update when changes are merged to the main branch."
  },
  "api/QuestNav.Commands.CommandProcessor.html": {
    "href": "api/QuestNav.Commands.CommandProcessor.html",
    "title": "Class CommandProcessor | QuestNav API Documentation",
    "summary": "Class CommandProcessor Processes commands received from the robot and executes appropriate actions Inheritance object CommandProcessor Implements ICommandProcessor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Commands Assembly: QuestNav.dll Syntax public class CommandProcessor : ICommandProcessor Constructors CommandProcessor(NetworkTableConnection, Transform, Transform, Transform) Initializes a new command processor with required dependencies Declaration public CommandProcessor(NetworkTableConnection networkTableConnection, Transform vrCamera, Transform vrCameraRoot, Transform resetTransform) Parameters Type Name Description NetworkTableConnection networkTableConnection Network connection for command communication Transform vrCamera Reference to the VR camera transform Transform vrCameraRoot Reference to the VR camera root transform Transform resetTransform Reference to the reset position transform Methods ProcessCommands() Processes incoming commands from the robot and executes them if they haven't been processed before Declaration public void ProcessCommands() Implements ICommandProcessor"
  },
  "api/QuestNav.Commands.Commands.PoseResetCommand.html": {
    "href": "api/QuestNav.Commands.Commands.PoseResetCommand.html",
    "title": "Class PoseResetCommand | QuestNav API Documentation",
    "summary": "Class PoseResetCommand Resets the VR camera pose to a specified position Inheritance object PoseResetCommand Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Commands.Commands Assembly: QuestNav.dll Syntax public class PoseResetCommand : ICommand Constructors PoseResetCommand(INetworkTableConnection, Transform, Transform, Transform) Initializes a new instance of the PoseResetCommand Declaration public PoseResetCommand(INetworkTableConnection networkTableConnection, Transform vrCamera, Transform vrCameraRoot, Transform resetTransform) Parameters Type Name Description INetworkTableConnection networkTableConnection The network connection to use for command communication Transform vrCamera Reference to the VR camera transform Transform vrCameraRoot Reference to the VR camera root transform Transform resetTransform Reference to the reset position transform Properties commandNiceName The formatted name for PoseResetCommand Declaration public string commandNiceName { get; } Property Value Type Description string Methods Execute(ProtobufQuestNavCommand) Executes the pose reset command by applying the target pose to the VR camera system Declaration public void Execute(ProtobufQuestNavCommand receivedCommand) Parameters Type Name Description ProtobufQuestNavCommand receivedCommand The command containing pose reset payload with target position Implements ICommand"
  },
  "api/QuestNav.Commands.Commands.html": {
    "href": "api/QuestNav.Commands.Commands.html",
    "title": "Namespace QuestNav.Commands.Commands | QuestNav API Documentation",
    "summary": "Namespace QuestNav.Commands.Commands Classes PoseResetCommand Resets the VR camera pose to a specified position"
  },
  "api/QuestNav.Commands.ICommand.html": {
    "href": "api/QuestNav.Commands.ICommand.html",
    "title": "Interface ICommand | QuestNav API Documentation",
    "summary": "Interface ICommand Interface for individual command implementations Namespace: QuestNav.Commands Assembly: QuestNav.dll Syntax public interface ICommand Properties commandNiceName Gets the nice name of the command Declaration string commandNiceName { get; } Property Value Type Description string Methods Execute(ProtobufQuestNavCommand) Executes this command with the provided command data Declaration void Execute(ProtobufQuestNavCommand receivedCommand) Parameters Type Name Description ProtobufQuestNavCommand receivedCommand The command data received from the robot"
  },
  "api/QuestNav.Commands.ICommandProcessor.html": {
    "href": "api/QuestNav.Commands.ICommandProcessor.html",
    "title": "Interface ICommandProcessor | QuestNav API Documentation",
    "summary": "Interface ICommandProcessor Interface for command processing. Namespace: QuestNav.Commands Assembly: QuestNav.dll Syntax public interface ICommandProcessor Methods ProcessCommands() Processes commands received from the robot. Declaration void ProcessCommands()"
  },
  "api/QuestNav.Commands.html": {
    "href": "api/QuestNav.Commands.html",
    "title": "Namespace QuestNav.Commands | QuestNav API Documentation",
    "summary": "Namespace QuestNav.Commands Classes CommandProcessor Processes commands received from the robot and executes appropriate actions Interfaces ICommand Interface for individual command implementations ICommandProcessor Interface for command processing."
  },
  "api/QuestNav.Core.QuestNav.html": {
    "href": "api/QuestNav.Core.QuestNav.html",
    "title": "Class QuestNav | QuestNav API Documentation",
    "summary": "Class QuestNav Main controller class for QuestNav application. Manages streaming of VR motion data to a FRC robot through NetworkTables. Orchestrates pose tracking, reset operations, and network communication. Inheritance object Object Component Behaviour MonoBehaviour QuestNav Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.didStart MonoBehaviour.didAwake MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.CompareTag(TagHandle) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetEntityId() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion, CancellationToken) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, CancellationToken) Object.InstantiateAsync<T>(T, InstantiateParameters, CancellationToken) Object.InstantiateAsync<T>(T, int, InstantiateParameters, CancellationToken) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters, CancellationToken) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters, CancellationToken) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters, CancellationToken) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: QuestNav.Core Assembly: QuestNav.dll Syntax public class QuestNav : MonoBehaviour"
  },
  "api/QuestNav.Core.QuestNavConstants.Commands.html": {
    "href": "api/QuestNav.Core.QuestNavConstants.Commands.html",
    "title": "Class QuestNavConstants.Commands | QuestNav API Documentation",
    "summary": "Class QuestNavConstants.Commands Constants related to command processing. Inheritance object QuestNavConstants.Commands Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Core Assembly: QuestNav.dll Syntax public static class QuestNavConstants.Commands Fields HEADING_RESET Command code for heading reset request Declaration public const int HEADING_RESET = 1 Field Value Type Description int HEADING_RESET_SUCCESS Response code for successful heading reset Declaration public const int HEADING_RESET_SUCCESS = 99 Field Value Type Description int IDLE Command code for no request/response Declaration public const int IDLE = 0 Field Value Type Description int PING Command code for ping request Declaration public const int PING = 3 Field Value Type Description int PING_RESPONSE Response code for ping Declaration public const int PING_RESPONSE = 97 Field Value Type Description int POSE_RESET Command code for pose reset request Declaration public const int POSE_RESET = 2 Field Value Type Description int POSE_RESET_SUCCESS Response code for successful pose reset Declaration public const int POSE_RESET_SUCCESS = 98 Field Value Type Description int"
  },
  "api/QuestNav.Core.QuestNavConstants.Display.html": {
    "href": "api/QuestNav.Core.QuestNavConstants.Display.html",
    "title": "Class QuestNavConstants.Display | QuestNav API Documentation",
    "summary": "Class QuestNavConstants.Display Constants related to the display and update frequency. Inheritance object QuestNavConstants.Display Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Core Assembly: QuestNav.dll Syntax public static class QuestNavConstants.Display Fields DISPLAY_FREQUENCY Quest display frequency (in Hz) Declaration public const float DISPLAY_FREQUENCY = 120 Field Value Type Description float"
  },
  "api/QuestNav.Core.QuestNavConstants.Field.html": {
    "href": "api/QuestNav.Core.QuestNavConstants.Field.html",
    "title": "Class QuestNavConstants.Field | QuestNav API Documentation",
    "summary": "Class QuestNavConstants.Field Constants related to FRC field dimensions and pose resets. Inheritance object QuestNavConstants.Field Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Core Assembly: QuestNav.dll Syntax public static class QuestNavConstants.Field Fields FIELD_LENGTH FRC field length in meters Declaration public const float FIELD_LENGTH = 16.54 Field Value Type Description float FIELD_WIDTH FRC field width in meters Declaration public const float FIELD_WIDTH = 8.02 Field Value Type Description float MAX_POSE_READ_RETRIES Maximum number of attempts to read pose data Declaration public const int MAX_POSE_READ_RETRIES = 3 Field Value Type Description int POSE_RETRY_DELAY_MS Delay between retry attempts (ms) Declaration public const float POSE_RETRY_DELAY_MS = 50 Field Value Type Description float POSITION_ERROR_THRESHOLD Position error threshold for warning (meters) Declaration public const float POSITION_ERROR_THRESHOLD = 0.01 Field Value Type Description float"
  },
  "api/QuestNav.Core.QuestNavConstants.Logging.html": {
    "href": "api/QuestNav.Core.QuestNavConstants.Logging.html",
    "title": "Class QuestNavConstants.Logging | QuestNav API Documentation",
    "summary": "Class QuestNavConstants.Logging Constants related to logging Inheritance object QuestNavConstants.Logging Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Core Assembly: QuestNav.dll Syntax public static class QuestNavConstants.Logging Fields NT_LOG_LEVEL_MAX The lowest level to log. Almost ALWAYS this is CRITICAL. Declaration public const int NT_LOG_LEVEL_MAX = 50 Field Value Type Description int NT_LOG_LEVEL_MIN The lowest level to log. Usually this is INFO, or DEBUG1 Declaration public const int NT_LOG_LEVEL_MIN = 9 Field Value Type Description int"
  },
  "api/QuestNav.Core.QuestNavConstants.Network.html": {
    "href": "api/QuestNav.Core.QuestNavConstants.Network.html",
    "title": "Class QuestNavConstants.Network | QuestNav API Documentation",
    "summary": "Class QuestNavConstants.Network Constants related to network configuration and communication. Inheritance object QuestNavConstants.Network Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Core Assembly: QuestNav.dll Syntax public static class QuestNavConstants.Network Fields DEBUG_NT_SERVER_ADDRESS_OVERRIDE Tells NT4 to connect to this IP instead of via team number if not empty. DEBUGGING PURPOSES ONLY! Declaration public const string DEBUG_NT_SERVER_ADDRESS_OVERRIDE = \"\" Field Value Type Description string DEFAULT_TEAM_NUMBER Default team number when none is provided Declaration public const int DEFAULT_TEAM_NUMBER = 9999 Field Value Type Description int NT_PUBLISHER_SETTINGS Default NetworkTables publisher/subscriber options Declaration public static PubSubOptions NT_PUBLISHER_SETTINGS Field Value Type Description PubSubOptions NT_SERVER_PORT NetworkTables server port Declaration public const int NT_SERVER_PORT = 5810 Field Value Type Description int"
  },
  "api/QuestNav.Core.QuestNavConstants.Timing.html": {
    "href": "api/QuestNav.Core.QuestNavConstants.Timing.html",
    "title": "Class QuestNavConstants.Timing | QuestNav API Documentation",
    "summary": "Class QuestNavConstants.Timing Constants related to non-main loop timing Inheritance object QuestNavConstants.Timing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Core Assembly: QuestNav.dll Syntax public static class QuestNavConstants.Timing Fields MAIN_UPDATE_HZ The rate to run the \"MainUpdate\" loop at Declaration public const int MAIN_UPDATE_HZ = 100 Field Value Type Description int SLOW_UPDATE_HZ The rate to run the \"SlowUpdate\" loop at Declaration public const int SLOW_UPDATE_HZ = 3 Field Value Type Description int"
  },
  "api/QuestNav.Core.QuestNavConstants.Topics.html": {
    "href": "api/QuestNav.Core.QuestNavConstants.Topics.html",
    "title": "Class QuestNavConstants.Topics | QuestNav API Documentation",
    "summary": "Class QuestNavConstants.Topics Constants related to NetworkTables topics and paths. Inheritance object QuestNavConstants.Topics Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Core Assembly: QuestNav.dll Syntax public static class QuestNavConstants.Topics Fields COMMAND_REQUEST Command request topic (robot to Quest) Declaration public const string COMMAND_REQUEST = \"/QuestNav/request\" Field Value Type Description string COMMAND_RESPONSE Command response topic (Quest to robot) Declaration public const string COMMAND_RESPONSE = \"/QuestNav/response\" Field Value Type Description string DEVICE_DATA Device data topic Declaration public const string DEVICE_DATA = \"/QuestNav/deviceData\" Field Value Type Description string FRAME_DATA Frame data topic Declaration public const string FRAME_DATA = \"/QuestNav/frameData\" Field Value Type Description string NT_BASE_PATH Base path for all QuestNav topics Declaration public const string NT_BASE_PATH = \"/QuestNav\" Field Value Type Description string"
  },
  "api/QuestNav.Core.QuestNavConstants.html": {
    "href": "api/QuestNav.Core.QuestNavConstants.html",
    "title": "Class QuestNavConstants | QuestNav API Documentation",
    "summary": "Class QuestNavConstants Contains all constants used by the QuestNav application. Organized by functional category for easier maintenance. Inheritance object QuestNavConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Core Assembly: QuestNav.dll Syntax public static class QuestNavConstants"
  },
  "api/QuestNav.Core.html": {
    "href": "api/QuestNav.Core.html",
    "title": "Namespace QuestNav.Core | QuestNav API Documentation",
    "summary": "Namespace QuestNav.Core Classes QuestNav Main controller class for QuestNav application. Manages streaming of VR motion data to a FRC robot through NetworkTables. Orchestrates pose tracking, reset operations, and network communication. QuestNavConstants Contains all constants used by the QuestNav application. Organized by functional category for easier maintenance. QuestNavConstants.Commands Constants related to command processing. QuestNavConstants.Display Constants related to the display and update frequency. QuestNavConstants.Field Constants related to FRC field dimensions and pose resets. QuestNavConstants.Logging Constants related to logging QuestNavConstants.Network Constants related to network configuration and communication. QuestNavConstants.Timing Constants related to non-main loop timing QuestNavConstants.Topics Constants related to NetworkTables topics and paths."
  },
  "api/QuestNav.Native.NTCore.DoublePublisher.html": {
    "href": "api/QuestNav.Native.NTCore.DoublePublisher.html",
    "title": "Class DoublePublisher | QuestNav API Documentation",
    "summary": "Class DoublePublisher Inheritance object DoublePublisher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public class DoublePublisher Methods Set(double) Declaration public bool Set(double value) Parameters Type Name Description double value Returns Type Description bool"
  },
  "api/QuestNav.Native.NTCore.DoubleSubscriber.html": {
    "href": "api/QuestNav.Native.NTCore.DoubleSubscriber.html",
    "title": "Class DoubleSubscriber | QuestNav API Documentation",
    "summary": "Class DoubleSubscriber Inheritance object DoubleSubscriber Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public class DoubleSubscriber Methods Get(double) Declaration public double Get(double defaultValue) Parameters Type Name Description double defaultValue Returns Type Description double"
  },
  "api/QuestNav.Native.NTCore.FloatArrayPublisher.html": {
    "href": "api/QuestNav.Native.NTCore.FloatArrayPublisher.html",
    "title": "Class FloatArrayPublisher | QuestNav API Documentation",
    "summary": "Class FloatArrayPublisher Inheritance object FloatArrayPublisher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public class FloatArrayPublisher Methods Set(float[]) Declaration public bool Set(float[] value) Parameters Type Name Description float[] value Returns Type Description bool"
  },
  "api/QuestNav.Native.NTCore.FloatArraySubscriber.html": {
    "href": "api/QuestNav.Native.NTCore.FloatArraySubscriber.html",
    "title": "Class FloatArraySubscriber | QuestNav API Documentation",
    "summary": "Class FloatArraySubscriber Inheritance object FloatArraySubscriber Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public class FloatArraySubscriber Methods Get(float[]) Declaration public float[] Get(float[] defaultValue) Parameters Type Name Description float[] defaultValue Returns Type Description float[]"
  },
  "api/QuestNav.Native.NTCore.IntegerPublisher.html": {
    "href": "api/QuestNav.Native.NTCore.IntegerPublisher.html",
    "title": "Class IntegerPublisher | QuestNav API Documentation",
    "summary": "Class IntegerPublisher Inheritance object IntegerPublisher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public class IntegerPublisher Methods Set(long) Declaration public bool Set(long value) Parameters Type Name Description long value Returns Type Description bool"
  },
  "api/QuestNav.Native.NTCore.IntegerSubscriber.html": {
    "href": "api/QuestNav.Native.NTCore.IntegerSubscriber.html",
    "title": "Class IntegerSubscriber | QuestNav API Documentation",
    "summary": "Class IntegerSubscriber Inheritance object IntegerSubscriber Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public class IntegerSubscriber Methods Get(long) Declaration public long Get(long defaultValue) Parameters Type Name Description long defaultValue Returns Type Description long"
  },
  "api/QuestNav.Native.NTCore.NativeConnectionInfo.html": {
    "href": "api/QuestNav.Native.NTCore.NativeConnectionInfo.html",
    "title": "Struct NativeConnectionInfo | QuestNav API Documentation",
    "summary": "Struct NativeConnectionInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct NativeConnectionInfo Fields lastUpdate Declaration public ulong lastUpdate Field Value Type Description ulong protocolVersion Declaration public uint protocolVersion Field Value Type Description uint remoteId Declaration public WpiString remoteId Field Value Type Description WpiString remoteIp Declaration public WpiString remoteIp Field Value Type Description WpiString remotePort Declaration public uint remotePort Field Value Type Description uint"
  },
  "api/QuestNav.Native.NTCore.NativeNetworkTableValue.NtValueUnion.NtValueBooleanArray.html": {
    "href": "api/QuestNav.Native.NTCore.NativeNetworkTableValue.NtValueUnion.NtValueBooleanArray.html",
    "title": "Struct NativeNetworkTableValue.NtValueUnion.NtValueBooleanArray | QuestNav API Documentation",
    "summary": "Struct NativeNetworkTableValue.NtValueUnion.NtValueBooleanArray Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct NativeNetworkTableValue.NtValueUnion.NtValueBooleanArray Fields arr Declaration public int* arr Field Value Type Description int* size Declaration public UIntPtr size Field Value Type Description UIntPtr"
  },
  "api/QuestNav.Native.NTCore.NativeNetworkTableValue.NtValueUnion.NtValueDoubleArray.html": {
    "href": "api/QuestNav.Native.NTCore.NativeNetworkTableValue.NtValueUnion.NtValueDoubleArray.html",
    "title": "Struct NativeNetworkTableValue.NtValueUnion.NtValueDoubleArray | QuestNav API Documentation",
    "summary": "Struct NativeNetworkTableValue.NtValueUnion.NtValueDoubleArray Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct NativeNetworkTableValue.NtValueUnion.NtValueDoubleArray Fields arr Declaration public double* arr Field Value Type Description double* size Declaration public UIntPtr size Field Value Type Description UIntPtr"
  },
  "api/QuestNav.Native.NTCore.NativeNetworkTableValue.NtValueUnion.NtValueFloatArray.html": {
    "href": "api/QuestNav.Native.NTCore.NativeNetworkTableValue.NtValueUnion.NtValueFloatArray.html",
    "title": "Struct NativeNetworkTableValue.NtValueUnion.NtValueFloatArray | QuestNav API Documentation",
    "summary": "Struct NativeNetworkTableValue.NtValueUnion.NtValueFloatArray Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct NativeNetworkTableValue.NtValueUnion.NtValueFloatArray Fields arr Declaration public float* arr Field Value Type Description float* size Declaration public UIntPtr size Field Value Type Description UIntPtr"
  },
  "api/QuestNav.Native.NTCore.NativeNetworkTableValue.NtValueUnion.NtValueIntArray.html": {
    "href": "api/QuestNav.Native.NTCore.NativeNetworkTableValue.NtValueUnion.NtValueIntArray.html",
    "title": "Struct NativeNetworkTableValue.NtValueUnion.NtValueIntArray | QuestNav API Documentation",
    "summary": "Struct NativeNetworkTableValue.NtValueUnion.NtValueIntArray Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct NativeNetworkTableValue.NtValueUnion.NtValueIntArray Fields arr Declaration public long* arr Field Value Type Description long* size Declaration public UIntPtr size Field Value Type Description UIntPtr"
  },
  "api/QuestNav.Native.NTCore.NativeNetworkTableValue.NtValueUnion.NtValueRaw.html": {
    "href": "api/QuestNav.Native.NTCore.NativeNetworkTableValue.NtValueUnion.NtValueRaw.html",
    "title": "Struct NativeNetworkTableValue.NtValueUnion.NtValueRaw | QuestNav API Documentation",
    "summary": "Struct NativeNetworkTableValue.NtValueUnion.NtValueRaw Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct NativeNetworkTableValue.NtValueUnion.NtValueRaw Fields data Declaration public byte* data Field Value Type Description byte* size Declaration public UIntPtr size Field Value Type Description UIntPtr"
  },
  "api/QuestNav.Native.NTCore.NativeNetworkTableValue.NtValueUnion.NtValueStringArray.html": {
    "href": "api/QuestNav.Native.NTCore.NativeNetworkTableValue.NtValueUnion.NtValueStringArray.html",
    "title": "Struct NativeNetworkTableValue.NtValueUnion.NtValueStringArray | QuestNav API Documentation",
    "summary": "Struct NativeNetworkTableValue.NtValueUnion.NtValueStringArray Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct NativeNetworkTableValue.NtValueUnion.NtValueStringArray Fields arr Declaration public WpiString* arr Field Value Type Description WpiString* size Declaration public UIntPtr size Field Value Type Description UIntPtr"
  },
  "api/QuestNav.Native.NTCore.NativeNetworkTableValue.NtValueUnion.html": {
    "href": "api/QuestNav.Native.NTCore.NativeNetworkTableValue.NtValueUnion.html",
    "title": "Struct NativeNetworkTableValue.NtValueUnion | QuestNav API Documentation",
    "summary": "Struct NativeNetworkTableValue.NtValueUnion Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct NativeNetworkTableValue.NtValueUnion Fields arrBoolean Declaration public NativeNetworkTableValue.NtValueUnion.NtValueBooleanArray arrBoolean Field Value Type Description NativeNetworkTableValue.NtValueUnion.NtValueBooleanArray arrDouble Declaration public NativeNetworkTableValue.NtValueUnion.NtValueDoubleArray arrDouble Field Value Type Description NativeNetworkTableValue.NtValueUnion.NtValueDoubleArray arrFloat Declaration public NativeNetworkTableValue.NtValueUnion.NtValueFloatArray arrFloat Field Value Type Description NativeNetworkTableValue.NtValueUnion.NtValueFloatArray arrInt Declaration public NativeNetworkTableValue.NtValueUnion.NtValueIntArray arrInt Field Value Type Description NativeNetworkTableValue.NtValueUnion.NtValueIntArray arrString Declaration public NativeNetworkTableValue.NtValueUnion.NtValueStringArray arrString Field Value Type Description NativeNetworkTableValue.NtValueUnion.NtValueStringArray valueBoolean Declaration public int valueBoolean Field Value Type Description int valueDouble Declaration public double valueDouble Field Value Type Description double valueFloat Declaration public float valueFloat Field Value Type Description float valueInt Declaration public long valueInt Field Value Type Description long valueRaw Declaration public NativeNetworkTableValue.NtValueUnion.NtValueRaw valueRaw Field Value Type Description NativeNetworkTableValue.NtValueUnion.NtValueRaw valueString Declaration public WpiString valueString Field Value Type Description WpiString"
  },
  "api/QuestNav.Native.NTCore.NativeNetworkTableValue.html": {
    "href": "api/QuestNav.Native.NTCore.NativeNetworkTableValue.html",
    "title": "Struct NativeNetworkTableValue | QuestNav API Documentation",
    "summary": "Struct NativeNetworkTableValue Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct NativeNetworkTableValue Fields data Declaration public NativeNetworkTableValue.NtValueUnion data Field Value Type Description NativeNetworkTableValue.NtValueUnion lastChange Declaration public long lastChange Field Value Type Description long serverTime Declaration public long serverTime Field Value Type Description long type Declaration public NtType type Field Value Type Description NtType"
  },
  "api/QuestNav.Native.NTCore.NativeNtEvent.NtEventUnion.html": {
    "href": "api/QuestNav.Native.NTCore.NativeNtEvent.NtEventUnion.html",
    "title": "Struct NativeNtEvent.NtEventUnion | QuestNav API Documentation",
    "summary": "Struct NativeNtEvent.NtEventUnion Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct NativeNtEvent.NtEventUnion Fields connInfo Declaration public NativeConnectionInfo connInfo Field Value Type Description NativeConnectionInfo logMessage Declaration public NativeNtLogMessage logMessage Field Value Type Description NativeNtLogMessage timeSyncData Declaration public NativeTimeSyncEventData timeSyncData Field Value Type Description NativeTimeSyncEventData topicInfo Declaration public NativeTopicInfo topicInfo Field Value Type Description NativeTopicInfo valueData Declaration public NativeValueEventData valueData Field Value Type Description NativeValueEventData"
  },
  "api/QuestNav.Native.NTCore.NativeNtEvent.html": {
    "href": "api/QuestNav.Native.NTCore.NativeNtEvent.html",
    "title": "Struct NativeNtEvent | QuestNav API Documentation",
    "summary": "Struct NativeNtEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct NativeNtEvent Fields data Declaration public NativeNtEvent.NtEventUnion data Field Value Type Description NativeNtEvent.NtEventUnion flags Declaration public uint flags Field Value Type Description uint listenerHandle Declaration public uint listenerHandle Field Value Type Description uint"
  },
  "api/QuestNav.Native.NTCore.NativeNtLogMessage.html": {
    "href": "api/QuestNav.Native.NTCore.NativeNtLogMessage.html",
    "title": "Struct NativeNtLogMessage | QuestNav API Documentation",
    "summary": "Struct NativeNtLogMessage Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct NativeNtLogMessage Fields filename Declaration public WpiString filename Field Value Type Description WpiString level Declaration public uint level Field Value Type Description uint line Declaration public uint line Field Value Type Description uint message Declaration public WpiString message Field Value Type Description WpiString"
  },
  "api/QuestNav.Native.NTCore.NativePubSubOptions.html": {
    "href": "api/QuestNav.Native.NTCore.NativePubSubOptions.html",
    "title": "Struct NativePubSubOptions | QuestNav API Documentation",
    "summary": "Struct NativePubSubOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct NativePubSubOptions Fields disableLocal Declaration public int disableLocal Field Value Type Description int disableRemote Declaration public int disableRemote Field Value Type Description int excludePublisher Declaration public uint excludePublisher Field Value Type Description uint excludeSelf Declaration public int excludeSelf Field Value Type Description int hidden Declaration public int hidden Field Value Type Description int keepDuplicates Declaration public int keepDuplicates Field Value Type Description int periodic Declaration public double periodic Field Value Type Description double pollStorage Declaration public uint pollStorage Field Value Type Description uint prefixMatch Declaration public int prefixMatch Field Value Type Description int sendAll Declaration public int sendAll Field Value Type Description int structSize Declaration public uint structSize Field Value Type Description uint topicsOnly Declaration public int topicsOnly Field Value Type Description int"
  },
  "api/QuestNav.Native.NTCore.NativeTimeSyncEventData.html": {
    "href": "api/QuestNav.Native.NTCore.NativeTimeSyncEventData.html",
    "title": "Struct NativeTimeSyncEventData | QuestNav API Documentation",
    "summary": "Struct NativeTimeSyncEventData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct NativeTimeSyncEventData Fields rtt2 Declaration public long rtt2 Field Value Type Description long serverTimeOffset Declaration public long serverTimeOffset Field Value Type Description long valid Declaration public int valid Field Value Type Description int"
  },
  "api/QuestNav.Native.NTCore.NativeTopicInfo.html": {
    "href": "api/QuestNav.Native.NTCore.NativeTopicInfo.html",
    "title": "Struct NativeTopicInfo | QuestNav API Documentation",
    "summary": "Struct NativeTopicInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct NativeTopicInfo Fields name Declaration public WpiString name Field Value Type Description WpiString properties Declaration public WpiString properties Field Value Type Description WpiString topic Declaration public int topic Field Value Type Description int type Declaration public NtType type Field Value Type Description NtType typeStr Declaration public WpiString typeStr Field Value Type Description WpiString"
  },
  "api/QuestNav.Native.NTCore.NativeValueEventData.html": {
    "href": "api/QuestNav.Native.NTCore.NativeValueEventData.html",
    "title": "Struct NativeValueEventData | QuestNav API Documentation",
    "summary": "Struct NativeValueEventData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct NativeValueEventData Fields subentry Declaration public int subentry Field Value Type Description int topic Declaration public int topic Field Value Type Description int value Declaration public NativeNetworkTableValue value Field Value Type Description NativeNetworkTableValue"
  },
  "api/QuestNav.Native.NTCore.NtCoreNatives.html": {
    "href": "api/QuestNav.Native.NTCore.NtCoreNatives.html",
    "title": "Class NtCoreNatives | QuestNav API Documentation",
    "summary": "Class NtCoreNatives Inheritance object NtCoreNatives Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public class NtCoreNatives Fields NT_DEFAULT_PORT4 Declaration public const int NT_DEFAULT_PORT4 = 5810 Field Value Type Description int Methods NT_AddPolledLogger(uint, uint, uint) Declaration public static extern uint NT_AddPolledLogger(uint poller, uint minLevel, uint maxLevel) Parameters Type Name Description uint poller uint minLevel uint maxLevel Returns Type Description uint NT_CreateListenerPoller(uint) Declaration public static extern uint NT_CreateListenerPoller(uint inst) Parameters Type Name Description uint inst Returns Type Description uint NT_DestroyListenerPoller(uint) Declaration public static extern void NT_DestroyListenerPoller(uint poller) Parameters Type Name Description uint poller NT_DisposeEventArray(NativeNtEvent*, UIntPtr) Declaration public static extern void NT_DisposeEventArray(NativeNtEvent* arr, UIntPtr count) Parameters Type Name Description NativeNtEvent* arr UIntPtr count NT_FreeFloatArray(float*) Declaration public static extern void NT_FreeFloatArray(float* value) Parameters Type Name Description float* value NT_FreeRaw(byte*) Declaration public static extern void NT_FreeRaw(byte* value) Parameters Type Name Description byte* value NT_GetDefaultInstance() Declaration public static extern uint NT_GetDefaultInstance() Returns Type Description uint NT_GetDouble(uint, double) Declaration public static extern double NT_GetDouble(uint subscriber, double defaultValue) Parameters Type Name Description uint subscriber double defaultValue Returns Type Description double NT_GetFloatArray(uint, float*, UIntPtr, UIntPtr*) Declaration public static extern float* NT_GetFloatArray(uint subscriber, float* defaultValue, UIntPtr defaultLen, UIntPtr* len) Parameters Type Name Description uint subscriber float* defaultValue UIntPtr defaultLen UIntPtr* len Returns Type Description float* NT_GetInteger(uint, long) Declaration public static extern long NT_GetInteger(uint subscriber, long defaultValue) Parameters Type Name Description uint subscriber long defaultValue Returns Type Description long NT_GetRaw(uint, byte*, UIntPtr, UIntPtr*) Declaration public static extern byte* NT_GetRaw(uint subscriber, byte* defaultValue, UIntPtr defaultLen, UIntPtr* len) Parameters Type Name Description uint subscriber byte* defaultValue UIntPtr defaultLen UIntPtr* len Returns Type Description byte* NT_GetTopic(uint, WpiString*) Declaration public static extern uint NT_GetTopic(uint inst, WpiString* name) Parameters Type Name Description uint inst WpiString* name Returns Type Description uint NT_IsConnected(uint) Declaration public static extern int NT_IsConnected(uint inst) Parameters Type Name Description uint inst Returns Type Description int NT_Publish(uint, NtType, WpiString*, NativePubSubOptions*) Declaration public static extern uint NT_Publish(uint topic, NtType type, WpiString* typeStr, NativePubSubOptions* options) Parameters Type Name Description uint topic NtType type WpiString* typeStr NativePubSubOptions* options Returns Type Description uint NT_ReadListenerQueue(uint, UIntPtr*) Declaration public static extern NativeNtEvent* NT_ReadListenerQueue(uint poller, UIntPtr* len) Parameters Type Name Description uint poller UIntPtr* len Returns Type Description NativeNtEvent* NT_SetDouble(uint, long, double) Declaration public static extern int NT_SetDouble(uint publisher, long time, double value) Parameters Type Name Description uint publisher long time double value Returns Type Description int NT_SetFloatArray(uint, long, float*, UIntPtr) Declaration public static extern int NT_SetFloatArray(uint publisher, long time, float* value, UIntPtr len) Parameters Type Name Description uint publisher long time float* value UIntPtr len Returns Type Description int NT_SetInteger(uint, long, long) Declaration public static extern int NT_SetInteger(uint publisher, long time, long value) Parameters Type Name Description uint publisher long time long value Returns Type Description int NT_SetRaw(uint, long, byte*, UIntPtr) Declaration public static extern int NT_SetRaw(uint publisher, long time, byte* value, UIntPtr len) Parameters Type Name Description uint publisher long time byte* value UIntPtr len Returns Type Description int NT_SetServerMulti(uint, UIntPtr, WpiString*, uint*) Declaration public static extern void NT_SetServerMulti(uint inst, UIntPtr count, WpiString* server_names, uint* ports) Parameters Type Name Description uint inst UIntPtr count WpiString* server_names uint* ports NT_SetServerTeam(uint, uint, uint) Declaration public static extern void NT_SetServerTeam(uint inst, uint team, uint port) Parameters Type Name Description uint inst uint team uint port NT_StartClient4(uint, WpiString*) Declaration public static extern void NT_StartClient4(uint inst, WpiString* identity) Parameters Type Name Description uint inst WpiString* identity NT_Subscribe(uint, NtType, WpiString*, NativePubSubOptions*) Declaration public static extern uint NT_Subscribe(uint topic, NtType type, WpiString* typeStr, NativePubSubOptions* options) Parameters Type Name Description uint topic NtType type WpiString* typeStr NativePubSubOptions* options Returns Type Description uint"
  },
  "api/QuestNav.Native.NTCore.NtInstance.html": {
    "href": "api/QuestNav.Native.NTCore.NtInstance.html",
    "title": "Class NtInstance | QuestNav API Documentation",
    "summary": "Class NtInstance Represents a NetworkTables instance for communication with FRC robots. Provides methods for creating publishers, subscribers, and managing connections. Inheritance object NtInstance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public class NtInstance Constructors NtInstance(string) Creates a new NetworkTables instance with the specified name Declaration public NtInstance(string instanceName) Parameters Type Name Description string instanceName The name for this NetworkTables instance Methods CreateLogger(int, int) Creates a logger for NetworkTables internal messages within the specified level range Declaration public PolledLogger CreateLogger(int minLevel, int maxLevel) Parameters Type Name Description int minLevel Minimum log level to capture int maxLevel Maximum log level to capture Returns Type Description PolledLogger A polled logger for NetworkTables messages GetDoublePublisher(string, PubSubOptions) Declaration public DoublePublisher GetDoublePublisher(string name, PubSubOptions options) Parameters Type Name Description string name PubSubOptions options Returns Type Description DoublePublisher GetDoubleSubscriber(string, PubSubOptions) Declaration public DoubleSubscriber GetDoubleSubscriber(string name, PubSubOptions options) Parameters Type Name Description string name PubSubOptions options Returns Type Description DoubleSubscriber GetFloatArrayPublisher(string, PubSubOptions) Declaration public FloatArrayPublisher GetFloatArrayPublisher(string name, PubSubOptions options) Parameters Type Name Description string name PubSubOptions options Returns Type Description FloatArrayPublisher GetFloatArraySubscriber(string, PubSubOptions) Declaration public FloatArraySubscriber GetFloatArraySubscriber(string name, PubSubOptions options) Parameters Type Name Description string name PubSubOptions options Returns Type Description FloatArraySubscriber GetIntegerPublisher(string, PubSubOptions) Declaration public IntegerPublisher GetIntegerPublisher(string name, PubSubOptions options) Parameters Type Name Description string name PubSubOptions options Returns Type Description IntegerPublisher GetIntegerSubscriber(string, PubSubOptions) Declaration public IntegerSubscriber GetIntegerSubscriber(string name, PubSubOptions options) Parameters Type Name Description string name PubSubOptions options Returns Type Description IntegerSubscriber GetProtobufPublisher<T>(string, string, PubSubOptions) Creates a protobuf publisher for the specified topic and message type Declaration public ProtobufPublisher<T> GetProtobufPublisher<T>(string name, string classString, PubSubOptions options) where T : IMessage<T> Parameters Type Name Description string name The topic name string classString The protobuf class identifier PubSubOptions options Publisher options Returns Type Description ProtobufPublisher<T> A protobuf publisher for the specified type Type Parameters Name Description T The protobuf message type GetProtobufSubscriber<T>(string, string, PubSubOptions) Creates a protobuf subscriber for the specified topic and message type Declaration public ProtobufSubscriber<T> GetProtobufSubscriber<T>(string name, string classString, PubSubOptions options) where T : IMessage<T>, new() Parameters Type Name Description string name The topic name string classString The protobuf class identifier PubSubOptions options Subscriber options Returns Type Description ProtobufSubscriber<T> A protobuf subscriber for the specified type Type Parameters Name Description T The protobuf message type GetRawPublisher(string, string, PubSubOptions) Declaration public RawPublisher GetRawPublisher(string name, string typeString, PubSubOptions options) Parameters Type Name Description string name string typeString PubSubOptions options Returns Type Description RawPublisher GetRawSubscriber(string, string, PubSubOptions) Declaration public RawSubscriber GetRawSubscriber(string name, string typeString, PubSubOptions options) Parameters Type Name Description string name string typeString PubSubOptions options Returns Type Description RawSubscriber IsConnected() Checks if this NetworkTables instance is currently connected to a server Declaration public bool IsConnected() Returns Type Description bool True if connected, false otherwise SetAddresses((string addr, int port)[]) Sets specific IP addresses and ports for NetworkTables connection Declaration public void SetAddresses((string addr, int port)[] addressesAndPorts) Parameters Type Name Description (string addr, int port)[] addressesAndPorts Array of address/port tuples to connect to SetTeamNumber(int, int) Sets the team number for automatic FRC robot connection Declaration public void SetTeamNumber(int teamNumber, int port = 5810) Parameters Type Name Description int teamNumber The FRC team number int port The NetworkTables port (defaults to standard port)"
  },
  "api/QuestNav.Native.NTCore.NtType.html": {
    "href": "api/QuestNav.Native.NTCore.NtType.html",
    "title": "Enum NtType | QuestNav API Documentation",
    "summary": "Enum NtType Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public enum NtType Fields Name Description NT_BOOLEAN NT_BOOLEAN_ARRAY NT_DOUBLE NT_DOUBLE_ARRAY NT_FLOAT NT_FLOAT_ARRAY NT_INTEGER NT_INTEGER_ARRAY NT_RAW NT_RPC NT_STRING NT_STRING_ARRAY NT_UNASSIGNED"
  },
  "api/QuestNav.Native.NTCore.PolledLogger.html": {
    "href": "api/QuestNav.Native.NTCore.PolledLogger.html",
    "title": "Class PolledLogger | QuestNav API Documentation",
    "summary": "Class PolledLogger Inheritance object PolledLogger Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public class PolledLogger : IDisposable Constructors PolledLogger(uint) Declaration public PolledLogger(uint handle) Parameters Type Name Description uint handle Methods Close() Declaration public void Close() Dispose() Declaration public void Dispose() PollForMessages() Declaration public List<(string message, string filename, int line, int level)> PollForMessages() Returns Type Description List<(string message, string filename, int line, int level)> Implements IDisposable"
  },
  "api/QuestNav.Native.NTCore.ProtobufPublisher-1.html": {
    "href": "api/QuestNav.Native.NTCore.ProtobufPublisher-1.html",
    "title": "Class ProtobufPublisher<T> | QuestNav API Documentation",
    "summary": "Class ProtobufPublisher<T> Publisher for protobuf messages over NetworkTables. Handles serialization of protobuf messages to byte arrays. Inheritance object ProtobufPublisher<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public class ProtobufPublisher<T> where T : IMessage<T> Type Parameters Name Description T The protobuf message type Methods Set(T) Publishes a protobuf message by serializing it to bytes and sending over NetworkTables Declaration public bool Set(T message) Parameters Type Name Description T message The protobuf message to publish Returns Type Description bool True if the message was successfully published, false otherwise"
  },
  "api/QuestNav.Native.NTCore.ProtobufSubscriber-1.html": {
    "href": "api/QuestNav.Native.NTCore.ProtobufSubscriber-1.html",
    "title": "Class ProtobufSubscriber<T> | QuestNav API Documentation",
    "summary": "Class ProtobufSubscriber<T> Subscriber for protobuf messages over NetworkTables. Handles deserialization of byte arrays to protobuf messages. Inheritance object ProtobufSubscriber<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public class ProtobufSubscriber<T> where T : IMessage<T>, new() Type Parameters Name Description T The protobuf message type Methods Get(T) Gets the latest protobuf message from NetworkTables, or returns the default value if none available Declaration public T Get(T defaultValue) Parameters Type Name Description T defaultValue The default value to return if no message is available Returns Type Description T The latest protobuf message or the default value"
  },
  "api/QuestNav.Native.NTCore.PubSubOptions.html": {
    "href": "api/QuestNav.Native.NTCore.PubSubOptions.html",
    "title": "Struct PubSubOptions | QuestNav API Documentation",
    "summary": "Struct PubSubOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct PubSubOptions Properties AllDefault Declaration public static PubSubOptions AllDefault { get; } Property Value Type Description PubSubOptions KeepDuplicates Declaration public bool KeepDuplicates { readonly get; set; } Property Value Type Description bool Periodic Declaration public double Periodic { readonly get; set; } Property Value Type Description double SendAll Declaration public bool SendAll { readonly get; set; } Property Value Type Description bool Methods ToNative() Declaration public NativePubSubOptions ToNative() Returns Type Description NativePubSubOptions"
  },
  "api/QuestNav.Native.NTCore.RawPublisher.html": {
    "href": "api/QuestNav.Native.NTCore.RawPublisher.html",
    "title": "Class RawPublisher | QuestNav API Documentation",
    "summary": "Class RawPublisher Inheritance object RawPublisher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public class RawPublisher Methods Set(byte[]) Declaration public bool Set(byte[] value) Parameters Type Name Description byte[] value Returns Type Description bool"
  },
  "api/QuestNav.Native.NTCore.RawSubscriber.html": {
    "href": "api/QuestNav.Native.NTCore.RawSubscriber.html",
    "title": "Class RawSubscriber | QuestNav API Documentation",
    "summary": "Class RawSubscriber Inheritance object RawSubscriber Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public class RawSubscriber Methods Get(byte[]) Declaration public byte[] Get(byte[] defaultValue) Parameters Type Name Description byte[] defaultValue Returns Type Description byte[]"
  },
  "api/QuestNav.Native.NTCore.WpiString.html": {
    "href": "api/QuestNav.Native.NTCore.WpiString.html",
    "title": "Struct WpiString | QuestNav API Documentation",
    "summary": "Struct WpiString Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Native.NTCore Assembly: QuestNav.dll Syntax public struct WpiString Fields len Declaration public UIntPtr len Field Value Type Description UIntPtr str Declaration public byte* str Field Value Type Description byte*"
  },
  "api/QuestNav.Native.NTCore.html": {
    "href": "api/QuestNav.Native.NTCore.html",
    "title": "Namespace QuestNav.Native.NTCore | QuestNav API Documentation",
    "summary": "Namespace QuestNav.Native.NTCore Classes DoublePublisher DoubleSubscriber FloatArrayPublisher FloatArraySubscriber IntegerPublisher IntegerSubscriber NtCoreNatives NtInstance Represents a NetworkTables instance for communication with FRC robots. Provides methods for creating publishers, subscribers, and managing connections. PolledLogger ProtobufPublisher<T> Publisher for protobuf messages over NetworkTables. Handles serialization of protobuf messages to byte arrays. ProtobufSubscriber<T> Subscriber for protobuf messages over NetworkTables. Handles deserialization of byte arrays to protobuf messages. RawPublisher RawSubscriber Structs NativeConnectionInfo NativeNetworkTableValue NativeNetworkTableValue.NtValueUnion NativeNetworkTableValue.NtValueUnion.NtValueBooleanArray NativeNetworkTableValue.NtValueUnion.NtValueDoubleArray NativeNetworkTableValue.NtValueUnion.NtValueFloatArray NativeNetworkTableValue.NtValueUnion.NtValueIntArray NativeNetworkTableValue.NtValueUnion.NtValueRaw NativeNetworkTableValue.NtValueUnion.NtValueStringArray NativeNtEvent NativeNtEvent.NtEventUnion NativeNtLogMessage NativePubSubOptions NativeTimeSyncEventData NativeTopicInfo NativeValueEventData PubSubOptions WpiString Enums NtType"
  },
  "api/QuestNav.Network.INetworkTableConnection.html": {
    "href": "api/QuestNav.Network.INetworkTableConnection.html",
    "title": "Interface INetworkTableConnection | QuestNav API Documentation",
    "summary": "Interface INetworkTableConnection Interface for NetworkTables connection management. Namespace: QuestNav.Network Assembly: QuestNav.dll Syntax public interface INetworkTableConnection Properties IsConnected Gets whether the connection is currently established. Declaration bool IsConnected { get; } Property Value Type Description bool IsReadyToConnect Gets whether the connection is ready to connect. Declaration bool IsReadyToConnect { get; } Property Value Type Description bool true when either an IP or team number has been set Methods GetCommandRequest() Gets the latest command request from the robot Declaration ProtobufQuestNavCommand GetCommandRequest() Returns Type Description ProtobufQuestNavCommand The command request, or a default command if none available LoggerPeriodic() Processes and logs NetworkTables internal messages Declaration void LoggerPeriodic() PublishDeviceData(bool, int, int) Publishes device data to NetworkTables. Declaration void PublishDeviceData(bool currentlyTracking, int trackingLostCounter, int batteryPercent) Parameters Type Name Description bool currentlyTracking Is the quest tracking currently int trackingLostCounter Number of tracking lost events this session int batteryPercent Current battery percentage PublishFrameData(int, double, Vector3, Quaternion) Publishes frame data to NetworkTables. Declaration void PublishFrameData(int frameCount, double timeStamp, Vector3 position, Quaternion rotation) Parameters Type Name Description int frameCount Current frame index double timeStamp Current timestamp Vector3 position Current field-relative position of the Quest headset Quaternion rotation The rotation of the quest headset SetCommandResponse(ProtobufQuestNavCommandResponse) Sends a command response back to the robot Declaration void SetCommandResponse(ProtobufQuestNavCommandResponse response) Parameters Type Name Description ProtobufQuestNavCommandResponse response The response to send UpdateTeamNumber(int) Updates the team number. Declaration void UpdateTeamNumber(int teamNumber) Parameters Type Name Description int teamNumber The team number"
  },
  "api/QuestNav.Network.html": {
    "href": "api/QuestNav.Network.html",
    "title": "Namespace QuestNav.Network | QuestNav API Documentation",
    "summary": "Namespace QuestNav.Network Interfaces INetworkTableConnection Interface for NetworkTables connection management."
  },
  "api/QuestNav.Protos.Generated.CommandsReflection.html": {
    "href": "api/QuestNav.Protos.Generated.CommandsReflection.html",
    "title": "Class CommandsReflection | QuestNav API Documentation",
    "summary": "Class CommandsReflection Holder for reflection information generated from commands.proto Inheritance object CommandsReflection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Protos.Generated Assembly: QuestNav.dll Syntax public static class CommandsReflection Properties Descriptor File descriptor for commands.proto Declaration public static FileDescriptor Descriptor { get; } Property Value Type Description FileDescriptor"
  },
  "api/QuestNav.Protos.Generated.DataReflection.html": {
    "href": "api/QuestNav.Protos.Generated.DataReflection.html",
    "title": "Class DataReflection | QuestNav API Documentation",
    "summary": "Class DataReflection Holder for reflection information generated from data.proto Inheritance object DataReflection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Protos.Generated Assembly: QuestNav.dll Syntax public static class DataReflection Properties Descriptor File descriptor for data.proto Declaration public static FileDescriptor Descriptor { get; } Property Value Type Description FileDescriptor"
  },
  "api/QuestNav.Protos.Generated.ProtobufQuestNavCommand.PayloadOneofCase.html": {
    "href": "api/QuestNav.Protos.Generated.ProtobufQuestNavCommand.PayloadOneofCase.html",
    "title": "Enum ProtobufQuestNavCommand.PayloadOneofCase | QuestNav API Documentation",
    "summary": "Enum ProtobufQuestNavCommand.PayloadOneofCase Enum of possible cases for the \"payload\" oneof. Namespace: QuestNav.Protos.Generated Assembly: QuestNav.dll Syntax public enum ProtobufQuestNavCommand.PayloadOneofCase Fields Name Description None PoseResetPayload"
  },
  "api/QuestNav.Protos.Generated.ProtobufQuestNavCommand.html": {
    "href": "api/QuestNav.Protos.Generated.ProtobufQuestNavCommand.html",
    "title": "Class ProtobufQuestNavCommand | QuestNav API Documentation",
    "summary": "Class ProtobufQuestNavCommand Main command message sent to the QuestNav system. This is the primary message type used to send commands from external systems (like robot code) to the Quest headset. Each command includes a type identifier, a unique tracking ID, and optional payload data specific to the command type. The command system is designed for asynchronous operation - commands are sent and responses are received separately, matched by the command_id field. Message Flow: Client creates command with unique command_id Client sets appropriate type and payload Client sends command to Quest Quest processes command and sends response with matching command_id Inheritance object ProtobufQuestNavCommand Implements IMessage<ProtobufQuestNavCommand> IEquatable<ProtobufQuestNavCommand> IDeepCloneable<ProtobufQuestNavCommand> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Protos.Generated Assembly: QuestNav.dll Syntax public sealed class ProtobufQuestNavCommand : IMessage<ProtobufQuestNavCommand>, IEquatable<ProtobufQuestNavCommand>, IDeepCloneable<ProtobufQuestNavCommand>, IBufferMessage, IMessage Constructors ProtobufQuestNavCommand() Declaration public ProtobufQuestNavCommand() ProtobufQuestNavCommand(ProtobufQuestNavCommand) Declaration public ProtobufQuestNavCommand(ProtobufQuestNavCommand other) Parameters Type Name Description ProtobufQuestNavCommand other Fields CommandIdFieldNumber Field number for the \"command_id\" field. Declaration public const int CommandIdFieldNumber = 2 Field Value Type Description int PoseResetPayloadFieldNumber Field number for the \"pose_reset_payload\" field. Declaration public const int PoseResetPayloadFieldNumber = 10 Field Value Type Description int TypeFieldNumber Field number for the \"type\" field. Declaration public const int TypeFieldNumber = 1 Field Value Type Description int Properties CommandId Unique identifier for this command instance. This ID is used to match commands with their responses in asynchronous communication. The client should generate unique IDs for each command to avoid confusion. The Quest will echo this ID in the response message. Recommended: Use incrementing integers or timestamps for uniqueness. Note: For FRC users, the vendor dependency will handle this automatically. Declaration public uint CommandId { get; set; } Property Value Type Description uint Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor Parser Declaration public static MessageParser<ProtobufQuestNavCommand> Parser { get; } Property Value Type Description MessageParser<ProtobufQuestNavCommand> PayloadCase Declaration public ProtobufQuestNavCommand.PayloadOneofCase PayloadCase { get; } Property Value Type Description ProtobufQuestNavCommand.PayloadOneofCase PoseResetPayload Payload for POSE_RESET commands. Set this field when type = POSE_RESET. Declaration public ProtobufQuestNavPoseResetPayload PoseResetPayload { get; set; } Property Value Type Description ProtobufQuestNavPoseResetPayload Type The type of command being sent. This field determines which payload (if any) should be populated and how the Quest should process the command. See QuestNavCommandType enum for available command types. Declaration public QuestNavCommandType Type { get; set; } Property Value Type Description QuestNavCommandType Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int ClearPayload() Declaration public void ClearPayload() Clone() Declaration public ProtobufQuestNavCommand Clone() Returns Type Description ProtobufQuestNavCommand Equals(ProtobufQuestNavCommand) Declaration public bool Equals(ProtobufQuestNavCommand other) Parameters Type Name Description ProtobufQuestNavCommand other Returns Type Description bool Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufQuestNavCommand) Declaration public void MergeFrom(ProtobufQuestNavCommand other) Parameters Type Name Description ProtobufQuestNavCommand other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/QuestNav.Protos.Generated.ProtobufQuestNavCommandResponse.html": {
    "href": "api/QuestNav.Protos.Generated.ProtobufQuestNavCommandResponse.html",
    "title": "Class ProtobufQuestNavCommandResponse | QuestNav API Documentation",
    "summary": "Class ProtobufQuestNavCommandResponse Response message sent back after processing a command. This message is sent by the Quest back to the client after processing a ProtobufQuestNavCommand. It provides status information about whether the command was executed successfully and any error details if it failed. The response is matched to the original command using the command_id field, allowing for proper asynchronous command handling even when multiple commands are in flight simultaneously. Response Timing: Responses are sent after command processing completes Some commands may take time to execute (e.g., pose reset with validation) Clients should implement timeouts for command responses Note: For FRC users, the vendor dependency will handle response matching automatically. Inheritance object ProtobufQuestNavCommandResponse Implements IMessage<ProtobufQuestNavCommandResponse> IEquatable<ProtobufQuestNavCommandResponse> IDeepCloneable<ProtobufQuestNavCommandResponse> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Protos.Generated Assembly: QuestNav.dll Syntax public sealed class ProtobufQuestNavCommandResponse : IMessage<ProtobufQuestNavCommandResponse>, IEquatable<ProtobufQuestNavCommandResponse>, IDeepCloneable<ProtobufQuestNavCommandResponse>, IBufferMessage, IMessage Constructors ProtobufQuestNavCommandResponse() Declaration public ProtobufQuestNavCommandResponse() ProtobufQuestNavCommandResponse(ProtobufQuestNavCommandResponse) Declaration public ProtobufQuestNavCommandResponse(ProtobufQuestNavCommandResponse other) Parameters Type Name Description ProtobufQuestNavCommandResponse other Fields CommandIdFieldNumber Field number for the \"command_id\" field. Declaration public const int CommandIdFieldNumber = 1 Field Value Type Description int ErrorMessageFieldNumber Field number for the \"error_message\" field. Declaration public const int ErrorMessageFieldNumber = 3 Field Value Type Description int SuccessFieldNumber Field number for the \"success\" field. Declaration public const int SuccessFieldNumber = 2 Field Value Type Description int Properties CommandId Command ID that matches the original command. This field echoes the command_id from the original ProtobufQuestNavCommand that this response corresponds to. Clients use this to match responses with their original commands in asynchronous communication. Declaration public uint CommandId { get; set; } Property Value Type Description uint Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor ErrorMessage Human-readable error message when success = false. This field provides detailed information about why a command failed. It should be empty or ignored when success = true. Error messages are intended for debugging and logging purposes. They may include technical details about the failure cause. Examples: \"Invalid pose coordinates: x value out of field bounds\" \"Tracking system not initialized\" \"Unknown command type\" Declaration public string ErrorMessage { get; set; } Property Value Type Description string Parser Declaration public static MessageParser<ProtobufQuestNavCommandResponse> Parser { get; } Property Value Type Description MessageParser<ProtobufQuestNavCommandResponse> Success Indicates whether the command was executed successfully. true: Command completed successfully false: Command failed (see error_message for details) Note: A successful response means the command was processed, but doesn't necessarily guarantee the desired outcome (e.g., pose reset might succeed but tracking could still be poor due to environmental conditions). Declaration public bool Success { get; set; } Property Value Type Description bool Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufQuestNavCommandResponse Clone() Returns Type Description ProtobufQuestNavCommandResponse Equals(ProtobufQuestNavCommandResponse) Declaration public bool Equals(ProtobufQuestNavCommandResponse other) Parameters Type Name Description ProtobufQuestNavCommandResponse other Returns Type Description bool Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufQuestNavCommandResponse) Declaration public void MergeFrom(ProtobufQuestNavCommandResponse other) Parameters Type Name Description ProtobufQuestNavCommandResponse other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/QuestNav.Protos.Generated.ProtobufQuestNavDeviceData.html": {
    "href": "api/QuestNav.Protos.Generated.ProtobufQuestNavDeviceData.html",
    "title": "Class ProtobufQuestNavDeviceData | QuestNav API Documentation",
    "summary": "Class ProtobufQuestNavDeviceData Lower-frequency device status data sent from Quest to external systems. This message contains device health and status information that doesn't need to be sent as frequently as tracking data. It's sent at 3 Hz (every 333 milliseconds) to provide monitoring and diagnostic information without consuming excessive bandwidth. This data helps external systems: Monitor Quest device health Detect tracking system issues Implement failsafe behaviors Provide user feedback about system status The information is useful for both autonomous operation and debugging/ troubleshooting scenarios. Inheritance object ProtobufQuestNavDeviceData Implements IMessage<ProtobufQuestNavDeviceData> IEquatable<ProtobufQuestNavDeviceData> IDeepCloneable<ProtobufQuestNavDeviceData> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Protos.Generated Assembly: QuestNav.dll Syntax public sealed class ProtobufQuestNavDeviceData : IMessage<ProtobufQuestNavDeviceData>, IEquatable<ProtobufQuestNavDeviceData>, IDeepCloneable<ProtobufQuestNavDeviceData>, IBufferMessage, IMessage Constructors ProtobufQuestNavDeviceData() Declaration public ProtobufQuestNavDeviceData() ProtobufQuestNavDeviceData(ProtobufQuestNavDeviceData) Declaration public ProtobufQuestNavDeviceData(ProtobufQuestNavDeviceData other) Parameters Type Name Description ProtobufQuestNavDeviceData other Fields BatteryPercentFieldNumber Field number for the \"battery_percent\" field. Declaration public const int BatteryPercentFieldNumber = 3 Field Value Type Description int CurrentlyTrackingFieldNumber Field number for the \"currently_tracking\" field. Declaration public const int CurrentlyTrackingFieldNumber = 2 Field Value Type Description int TrackingLostCounterFieldNumber Field number for the \"tracking_lost_counter\" field. Declaration public const int TrackingLostCounterFieldNumber = 1 Field Value Type Description int Properties BatteryPercent Quest device battery level as a percentage (0-100). This provides the current battery charge level of the Quest headset, allowing external systems to: Monitor power status during operation Implement low-battery warnings or behaviors Plan operation duration and charging needs Trigger graceful shutdown procedures Battery Level Guidelines: 100%: Fully charged 50-100%: Normal operation 20-50%: Consider charging soon 10-20%: Low battery warning recommended 0-10%: Critical - plan immediate shutdown/charging Note: Battery drain rate depends on: Processing load (tracking complexity) Display usage (if any) Wireless communication activity Environmental temperature Declaration public int BatteryPercent { get; set; } Property Value Type Description int CurrentlyTracking Current tracking status of the Quest device. true: Quest is actively tracking and pose data is reliable false: Quest has lost tracking and pose data should not be trusted When tracking is lost: Pose data becomes stale and unreliable Robot should switch to alternative localization methods Movement should be limited or stopped for safety Tracking can be recovered by: Improving lighting conditions Moving to area with more visual features Reducing motion to allow system to re-initialize Performing pose reset when tracking recovers External systems should monitor this field and implement appropriate fallback behaviors when tracking is lost. Declaration public bool CurrentlyTracking { get; set; } Property Value Type Description bool Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor Parser Declaration public static MessageParser<ProtobufQuestNavDeviceData> Parser { get; } Property Value Type Description MessageParser<ProtobufQuestNavDeviceData> TrackingLostCounter Count of tracking loss events since app startup. This counter increments each time the Quest's tracking system loses tracking after having established it. Tracking loss can occur due to: Poor lighting conditions Lack of visual features in environment Rapid motion or acceleration Occlusion of cameras Hardware issues A high or rapidly increasing counter may indicate: Environmental issues (lighting, features) Quest mounting problems (vibration, obstruction) Hardware degradation This metric helps assess tracking system reliability and can trigger alerts or fallback behaviors in robot code. Declaration public int TrackingLostCounter { get; set; } Property Value Type Description int Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufQuestNavDeviceData Clone() Returns Type Description ProtobufQuestNavDeviceData Equals(ProtobufQuestNavDeviceData) Declaration public bool Equals(ProtobufQuestNavDeviceData other) Parameters Type Name Description ProtobufQuestNavDeviceData other Returns Type Description bool Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufQuestNavDeviceData) Declaration public void MergeFrom(ProtobufQuestNavDeviceData other) Parameters Type Name Description ProtobufQuestNavDeviceData other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/QuestNav.Protos.Generated.ProtobufQuestNavFrameData.html": {
    "href": "api/QuestNav.Protos.Generated.ProtobufQuestNavFrameData.html",
    "title": "Class ProtobufQuestNavFrameData | QuestNav API Documentation",
    "summary": "Class ProtobufQuestNavFrameData High-frequency tracking data sent from Quest to external systems. This message contains the core tracking information that external systems (like robot code) need for real-time localization and navigation. It's sent at 100 Hz (every 10 milliseconds) to provide smooth, responsive tracking. The data represents the Quest's position and orientation on the field, derived from visual-inertial odometry using the Quest's cameras and IMU sensors. Coordinate System: Uses WPILib field-relative coordinate system Origin and axes depend on field setup and calibration Pose represents the Quest's position; mounting offset to get robot position is applied in end user code Inheritance object ProtobufQuestNavFrameData Implements IMessage<ProtobufQuestNavFrameData> IEquatable<ProtobufQuestNavFrameData> IDeepCloneable<ProtobufQuestNavFrameData> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Protos.Generated Assembly: QuestNav.dll Syntax public sealed class ProtobufQuestNavFrameData : IMessage<ProtobufQuestNavFrameData>, IEquatable<ProtobufQuestNavFrameData>, IDeepCloneable<ProtobufQuestNavFrameData>, IBufferMessage, IMessage Constructors ProtobufQuestNavFrameData() Declaration public ProtobufQuestNavFrameData() ProtobufQuestNavFrameData(ProtobufQuestNavFrameData) Declaration public ProtobufQuestNavFrameData(ProtobufQuestNavFrameData other) Parameters Type Name Description ProtobufQuestNavFrameData other Fields FrameCountFieldNumber Field number for the \"frame_count\" field. Declaration public const int FrameCountFieldNumber = 1 Field Value Type Description int Pose3DFieldNumber Field number for the \"pose3d\" field. Declaration public const int Pose3DFieldNumber = 3 Field Value Type Description int TimestampFieldNumber Field number for the \"timestamp\" field. Declaration public const int TimestampFieldNumber = 2 Field Value Type Description int Properties Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor FrameCount Sequential frame counter for this tracking session. This counter increments with each frame processed by the Quest's tracking system. It can be used to: Detect dropped messages Calculate effective frame rate Synchronize with other data streams The counter resets to 0 when the QuestNav app starts and increments continuously during operation. Frame drops in transmission will create gaps in the sequence. Declaration public int FrameCount { get; set; } Property Value Type Description int Parser Declaration public static MessageParser<ProtobufQuestNavFrameData> Parser { get; } Property Value Type Description MessageParser<ProtobufQuestNavFrameData> Pose3D Quest's 3D pose on the field in WPILib coordinates. This represents the Quest's position and orientation as determined by the Quest's tracking system. The pose accounts for: Coordinate system transformation to WPILib standard Any calibration offsets applied Note: This is the Quest's position; end user code applies mounting offset to get the robot's position. Coordinate System Details: X: Forward direction (towards opposing alliance) Y: Left direction (when facing forward) Z: Up direction Yaw (Z): Counter-clockwise (right-handed) rotation around the Z axis Pitch (Y): Counter-clockwise (right-handed) rotation around Y axis Roll (X): Counter-clockwise (right-handed) rotation around the X axis Units: meters for translation, radians for rotation Accuracy depends on: Environmental lighting and features Quest tracking quality Calibration accuracy Time since last pose reset Declaration public ProtobufPose3d Pose3D { get; set; } Property Value Type Description ProtobufPose3d Timestamp Timestamp in seconds since QuestNav app startup. This provides timing information for the tracking data, allowing external systems to: Calculate data age and latency Interpolate or extrapolate poses for prediction Synchronize with other sensor data Implement timeout detection The timestamp is relative to app startup, not system time, to avoid clock synchronization issues between devices. Resolution: Typically sub-millisecond precision Declaration public double Timestamp { get; set; } Property Value Type Description double Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufQuestNavFrameData Clone() Returns Type Description ProtobufQuestNavFrameData Equals(ProtobufQuestNavFrameData) Declaration public bool Equals(ProtobufQuestNavFrameData other) Parameters Type Name Description ProtobufQuestNavFrameData other Returns Type Description bool Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufQuestNavFrameData) Declaration public void MergeFrom(ProtobufQuestNavFrameData other) Parameters Type Name Description ProtobufQuestNavFrameData other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/QuestNav.Protos.Generated.ProtobufQuestNavPoseResetPayload.html": {
    "href": "api/QuestNav.Protos.Generated.ProtobufQuestNavPoseResetPayload.html",
    "title": "Class ProtobufQuestNavPoseResetPayload | QuestNav API Documentation",
    "summary": "Class ProtobufQuestNavPoseResetPayload Payload message for the POSE_RESET command. This message contains the data needed to execute a pose reset operation. The pose reset command allows external systems to correct the Quest's understanding of the robot's position and orientation on the field. Coordinate System: Uses WPILib field-relative coordinate system X-axis: Forward (towards opposing alliance) Y-axis: Left (when facing forward) Z-axis: Up Yaw (Z): Counter-clockwise (right-handed) rotation around the Z axis Pitch (Y): Counter-clockwise (right-handed) rotation around Y axis Roll (X): Counter-clockwise (right-handed) rotation around the X axis Rotation: Counter-clockwise positive (right-hand coordinate system) Origin: Typically at one corner of the field (see field layout documentation) Inheritance object ProtobufQuestNavPoseResetPayload Implements IMessage<ProtobufQuestNavPoseResetPayload> IEquatable<ProtobufQuestNavPoseResetPayload> IDeepCloneable<ProtobufQuestNavPoseResetPayload> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuestNav.Protos.Generated Assembly: QuestNav.dll Syntax public sealed class ProtobufQuestNavPoseResetPayload : IMessage<ProtobufQuestNavPoseResetPayload>, IEquatable<ProtobufQuestNavPoseResetPayload>, IDeepCloneable<ProtobufQuestNavPoseResetPayload>, IBufferMessage, IMessage Constructors ProtobufQuestNavPoseResetPayload() Declaration public ProtobufQuestNavPoseResetPayload() ProtobufQuestNavPoseResetPayload(ProtobufQuestNavPoseResetPayload) Declaration public ProtobufQuestNavPoseResetPayload(ProtobufQuestNavPoseResetPayload other) Parameters Type Name Description ProtobufQuestNavPoseResetPayload other Fields TargetPoseFieldNumber Field number for the \"target_pose\" field. Declaration public const int TargetPoseFieldNumber = 1 Field Value Type Description int Properties Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor Parser Declaration public static MessageParser<ProtobufQuestNavPoseResetPayload> Parser { get; } Property Value Type Description MessageParser<ProtobufQuestNavPoseResetPayload> TargetPose The target pose to reset the robot to. This should represent the robot's actual position and orientation on the field in the WPILib coordinate system. The Quest will update its internal tracking to match this pose, effectively correcting any accumulated drift. Units: Translation: meters Rotation: radians Declaration public ProtobufPose3d TargetPose { get; set; } Property Value Type Description ProtobufPose3d Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufQuestNavPoseResetPayload Clone() Returns Type Description ProtobufQuestNavPoseResetPayload Equals(ProtobufQuestNavPoseResetPayload) Declaration public bool Equals(ProtobufQuestNavPoseResetPayload other) Parameters Type Name Description ProtobufQuestNavPoseResetPayload other Returns Type Description bool Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufQuestNavPoseResetPayload) Declaration public void MergeFrom(ProtobufQuestNavPoseResetPayload other) Parameters Type Name Description ProtobufQuestNavPoseResetPayload other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/QuestNav.Protos.Generated.QuestNavCommandType.html": {
    "href": "api/QuestNav.Protos.Generated.QuestNavCommandType.html",
    "title": "Enum QuestNavCommandType | QuestNav API Documentation",
    "summary": "Enum QuestNavCommandType Enumeration of available command types in the QuestNav system. This enum defines all the different types of commands that can be sent to the Quest headset. The enum is designed to be extensible - new command types can be added without breaking existing clients. Design Notes: Values start from 0 as required by proto3 UNSPECIFIED value (0) is reserved for error handling Command values should be assigned incrementally for clarity Namespace: QuestNav.Protos.Generated Assembly: QuestNav.dll Syntax public enum QuestNavCommandType Fields Name Description CommandTypeUnspecified Default/invalid command type (required by proto3) PoseReset POSE_RESET: Resets the robot's pose estimation to a specified target pose. This command is used to correct drift in the tracking system by setting the robot's position and orientation to known values. Typically used when the robot is placed at a known location on the field. Requires: ProtobufQuestNavPoseResetPayload"
  },
  "api/QuestNav.Protos.Generated.html": {
    "href": "api/QuestNav.Protos.Generated.html",
    "title": "Namespace QuestNav.Protos.Generated | QuestNav API Documentation",
    "summary": "Namespace QuestNav.Protos.Generated Classes CommandsReflection Holder for reflection information generated from commands.proto DataReflection Holder for reflection information generated from data.proto ProtobufQuestNavCommand Main command message sent to the QuestNav system. This is the primary message type used to send commands from external systems (like robot code) to the Quest headset. Each command includes a type identifier, a unique tracking ID, and optional payload data specific to the command type. The command system is designed for asynchronous operation - commands are sent and responses are received separately, matched by the command_id field. Message Flow: Client creates command with unique command_id Client sets appropriate type and payload Client sends command to Quest Quest processes command and sends response with matching command_id ProtobufQuestNavCommandResponse Response message sent back after processing a command. This message is sent by the Quest back to the client after processing a ProtobufQuestNavCommand. It provides status information about whether the command was executed successfully and any error details if it failed. The response is matched to the original command using the command_id field, allowing for proper asynchronous command handling even when multiple commands are in flight simultaneously. Response Timing: Responses are sent after command processing completes Some commands may take time to execute (e.g., pose reset with validation) Clients should implement timeouts for command responses Note: For FRC users, the vendor dependency will handle response matching automatically. ProtobufQuestNavDeviceData Lower-frequency device status data sent from Quest to external systems. This message contains device health and status information that doesn't need to be sent as frequently as tracking data. It's sent at 3 Hz (every 333 milliseconds) to provide monitoring and diagnostic information without consuming excessive bandwidth. This data helps external systems: Monitor Quest device health Detect tracking system issues Implement failsafe behaviors Provide user feedback about system status The information is useful for both autonomous operation and debugging/ troubleshooting scenarios. ProtobufQuestNavFrameData High-frequency tracking data sent from Quest to external systems. This message contains the core tracking information that external systems (like robot code) need for real-time localization and navigation. It's sent at 100 Hz (every 10 milliseconds) to provide smooth, responsive tracking. The data represents the Quest's position and orientation on the field, derived from visual-inertial odometry using the Quest's cameras and IMU sensors. Coordinate System: Uses WPILib field-relative coordinate system Origin and axes depend on field setup and calibration Pose represents the Quest's position; mounting offset to get robot position is applied in end user code ProtobufQuestNavPoseResetPayload Payload message for the POSE_RESET command. This message contains the data needed to execute a pose reset operation. The pose reset command allows external systems to correct the Quest's understanding of the robot's position and orientation on the field. Coordinate System: Uses WPILib field-relative coordinate system X-axis: Forward (towards opposing alliance) Y-axis: Left (when facing forward) Z-axis: Up Yaw (Z): Counter-clockwise (right-handed) rotation around the Z axis Pitch (Y): Counter-clockwise (right-handed) rotation around Y axis Roll (X): Counter-clockwise (right-handed) rotation around the X axis Rotation: Counter-clockwise positive (right-hand coordinate system) Origin: Typically at one corner of the field (see field layout documentation) Enums ProtobufQuestNavCommand.PayloadOneofCase Enum of possible cases for the \"payload\" oneof. QuestNavCommandType Enumeration of available command types in the QuestNav system. This enum defines all the different types of commands that can be sent to the Quest headset. The enum is designed to be extensible - new command types can be added without breaking existing clients. Design Notes: Values start from 0 as required by proto3 UNSPECIFIED value (0) is reserved for error handling Command values should be assigned incrementally for clarity"
  },
  "api/QuestNav.UI.IUIManager.html": {
    "href": "api/QuestNav.UI.IUIManager.html",
    "title": "Interface IUIManager | QuestNav API Documentation",
    "summary": "Interface IUIManager Interface for UI management. Namespace: QuestNav.UI Assembly: QuestNav.dll Syntax public interface IUIManager Methods UIPeriodic() Updates the connection state and ip address in the UI Declaration void UIPeriodic()"
  },
  "api/QuestNav.UI.UIManager.html": {
    "href": "api/QuestNav.UI.UIManager.html",
    "title": "Class UIManager | QuestNav API Documentation",
    "summary": "Class UIManager Manages UI elements and user interactions for the QuestNav application. Inheritance object UIManager Implements IUIManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.UI Assembly: QuestNav.dll Syntax public class UIManager : IUIManager Constructors UIManager(INetworkTableConnection, TMP_InputField, TMP_Text, TMP_Text, TMP_Text, TMP_Text, TMP_Text, TMP_Text, TMP_Text, TMP_Text, Button, Toggle) Initializes the UI manager with required UI components. Declaration public UIManager(INetworkTableConnection networkTableConnection, TMP_InputField teamInput, TMP_Text ipAddressText, TMP_Text conStateText, TMP_Text posXText, TMP_Text posYText, TMP_Text posZText, TMP_Text xRotText, TMP_Text yRotText, TMP_Text zRotText, Button teamUpdateButton, Toggle autoStartToggle) Parameters Type Name Description INetworkTableConnection networkTableConnection Network connection reference for updating state TMP_InputField teamInput Input field for team number TMP_Text ipAddressText Text for IP address display TMP_Text conStateText Text for connection state display TMP_Text posXText Text for X coordinate of Quest position TMP_Text posYText Text for Y coordinate of Quest position TMP_Text posZText Text for Z coordinate of Quest position TMP_Text xRotText Text for X rotation of Quest position TMP_Text yRotText Text for Y rotation of Quest position TMP_Text zRotText Text for Z rotation of Quest position Button teamUpdateButton Button for updating team number Toggle autoStartToggle Button for turning auto start on/off Properties TeamNumber Gets the current team number. Declaration public int TeamNumber { get; } Property Value Type Description int Methods UIPeriodic() Updates the connection state and ip address in the UI Declaration public void UIPeriodic() UpdatePositionText(Vector3, Quaternion) Updates the connection state text display. Declaration public void UpdatePositionText(Vector3 position, Quaternion rotation) Parameters Type Name Description Vector3 position Quaternion rotation Implements IUIManager"
  },
  "api/QuestNav.UI.html": {
    "href": "api/QuestNav.UI.html",
    "title": "Namespace QuestNav.UI | QuestNav API Documentation",
    "summary": "Namespace QuestNav.UI Classes UIManager Manages UI elements and user interactions for the QuestNav application. Interfaces IUIManager Interface for UI management."
  },
  "api/QuestNav.Utils.Conversions.html": {
    "href": "api/QuestNav.Utils.Conversions.html",
    "title": "Class Conversions | QuestNav API Documentation",
    "summary": "Class Conversions Provides utility methods for converting between FRC and Unity coordinate systems. Inheritance object Conversions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Utils Assembly: QuestNav.dll Syntax public static class Conversions Methods FrcToUnity3d(ProtobufPose3d) Converts from FRC coordinate system to Unity coordinate system. Declaration public static (Vector3 position, Quaternion rotation) FrcToUnity3d(ProtobufPose3d targetPose3d) Parameters Type Name Description ProtobufPose3d targetPose3d Target position in FRC coordinates (meters, radians) Returns Type Description (Vector3 position, Quaternion rotation) Position and rotation in Unity coordinate system Remarks FRC Field Coordinates Unity World Coordinates Origin: Blue alliance wall Origin: Arbitrary (set by VR tracking) X-axis: Points toward red X-axis: Points right Y-axis: Points left Y-axis: Points up Z-axis: Points up Z-axis: Points forward Rotation: Counter-clockwise Rotation: Clockwise (left-handed) TRANSLATION MAPPING: FRC X (forward) â†’ Unity Z (forward) FRC Y (left) â†’ Unity -X (right becomes left) FRC Z (up) â†’ Unity Y (up) FRC Î¸ (CCW) â†’ Unity -Y rotation (CW) ROTATION MAPPING: Converting rotation requires remapping the axes and accounting for the change in \"handedness\". A robot's primary rotation in FRC is yaw, which is a counter-clockwise rotation around the FRC Z-axis (up). In Unity, the equivalent rotation is yaw around Unity's Y-axis (up). However, Unity's left-handed system means positive rotation is clockwise. Therefore, the angle must be inverted. This transformation is accomplished by shuffling and negating the quaternion components: Unity.x = FRC.y Unity.y = -FRC.z Unity.z = -FRC.x Unity.w = FRC.w This correctly maps the rotation from FRC's right-handed, Z-up frame to Unity's left-handed, Y-up frame. UnityToFrc3d(Vector3, Quaternion) Converts a pose from the Unity world coordinate system to the FRC field coordinate system. Declaration public static ProtobufPose3d UnityToFrc3d(Vector3 unityPosition, Quaternion unityRotation) Parameters Type Name Description Vector3 unityPosition VR headset position in Unity world coordinates Quaternion unityRotation VR headset orientation in Unity world coordinates Returns Type Description ProtobufPose3d 2D pose in FRC field coordinates (meters, radians) Remarks This method performs the inverse of FrcToUnity3d. It is primarily used to send data, such as a VR headset's pose, back to the robot in the coordinate system it understands. COORDINATE SYSTEM DIFFERENCES: Unity World Coordinates (Left-Handed, Y-up) FRC Field Coordinates (Right-Handed, Z-up) Origin: Arbitrary (set by VR tracking) Origin: Blue alliance wall X-axis: Points right X-axis: Points toward red alliance (forward) Y-axis: Points up Y-axis: Points left Z-axis: Points forward Z-axis: Points up Rotation: Clockwise (CW) positive Rotation: Counter-clockwise (CCW) positive TRANSLATION MAPPING: Unity Z (forward) â†’ FRC X (forward) Unity X (right) â†’ FRC -Y (left) Unity Y (up) â†’ FRC Z (up) ROTATION MAPPING: To convert rotation from Unity back to FRC, the axes are remapped and the change in \"handedness\" is reversed. Unity's primary yaw rotation occurs around its Y-axis (up) in a clockwise direction. This is converted back to the FRC standard of yaw around its Z-axis (up) in a counter-clockwise direction. This inverse transformation is accomplished by the reverse quaternion component shuffle: FRC.x = -Unity.z FRC.y = Unity.x FRC.z = -Unity.y FRC.w = Unity.w This correctly maps the rotation from Unity's left-handed, Y-up frame back to FRC's right-handed, Z-up frame. USAGE: Called 100 times per second to stream headset position to robot. The robot uses this data for autonomous navigation, driver assistance, or any other functionality that needs to know where the driver is looking."
  },
  "api/QuestNav.Utils.QuaternionExtensions.html": {
    "href": "api/QuestNav.Utils.QuaternionExtensions.html",
    "title": "Class QuaternionExtensions | QuestNav API Documentation",
    "summary": "Class QuaternionExtensions Extension methods for Unity's Quaternion class to convert to array format. Inheritance object QuaternionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Utils Assembly: QuestNav.dll Syntax public static class QuaternionExtensions Methods ToArray(Quaternion) Converts a Quaternion to a float array containing x, y, z, and w components. Declaration public static float[] ToArray(this Quaternion quaternion) Parameters Type Name Description Quaternion quaternion The Quaternion to convert Returns Type Description float[] Float array containing [x, y, z, w] values"
  },
  "api/QuestNav.Utils.QueuedLogger.LogLevel.html": {
    "href": "api/QuestNav.Utils.QueuedLogger.LogLevel.html",
    "title": "Enum QueuedLogger.LogLevel | QuestNav API Documentation",
    "summary": "Enum QueuedLogger.LogLevel Defines the supported log levels for the queued logger Namespace: QuestNav.Utils Assembly: QuestNav.dll Syntax public enum QueuedLogger.LogLevel Fields Name Description Error Error messages Info Informational messages Warning Warning messages"
  },
  "api/QuestNav.Utils.QueuedLogger.html": {
    "href": "api/QuestNav.Utils.QueuedLogger.html",
    "title": "Class QueuedLogger | QuestNav API Documentation",
    "summary": "Class QueuedLogger A thread-safe logging system that queues log messages and supports deduplication of identical messages. Messages are batched and flushed to Unity's Debug system periodically. Inheritance object QueuedLogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Utils Assembly: QuestNav.dll Syntax public static class QueuedLogger Methods Flush() Flushes all queued messages in order using the appropriate Debug method, and then clears the queue. Declaration public static void Flush() Log(string, LogLevel, string) Queues a message with the given log level. If the message is identical (and has no associated exception) to the previous entry, its count is increased. Declaration public static void Log(string message, QueuedLogger.LogLevel level = LogLevel.Info, string callerFilePath = \"\") Parameters Type Name Description string message The message to log QueuedLogger.LogLevel level The log level (defaults to Info) string callerFilePath Automatically populated with the calling file path LogError(string, string) Queues an error message. Declaration public static void LogError(string message, string callerFilePath = \"\") Parameters Type Name Description string message The error message to log string callerFilePath Automatically populated with the calling file path LogException(Exception, string) Queues an exception log entry using the exception's message. Declaration public static void LogException(Exception exception, string callerFilePath = \"\") Parameters Type Name Description Exception exception The exception to log string callerFilePath Automatically populated with the calling file path LogException(string, Exception, string) Queues an exception log entry with a custom message and exception details. Declaration public static void LogException(string message, Exception exception, string callerFilePath = \"\") Parameters Type Name Description string message Custom message to accompany the exception Exception exception The exception to log string callerFilePath Automatically populated with the calling file path LogWarning(string, string) Queues a warning message. Declaration public static void LogWarning(string message, string callerFilePath = \"\") Parameters Type Name Description string message The warning message to log string callerFilePath Automatically populated with the calling file path"
  },
  "api/QuestNav.Utils.VectorExtensions.html": {
    "href": "api/QuestNav.Utils.VectorExtensions.html",
    "title": "Class VectorExtensions | QuestNav API Documentation",
    "summary": "Class VectorExtensions Extension methods for Unity's Vector3 class to convert to array format. Inheritance object VectorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuestNav.Utils Assembly: QuestNav.dll Syntax public static class VectorExtensions Methods ToArray(Vector3) Converts a Vector3 to a float array containing x, y, and z components. Declaration public static float[] ToArray(this Vector3 vector) Parameters Type Name Description Vector3 vector The Vector3 to convert Returns Type Description float[] Float array containing [x, y, z] values"
  },
  "api/QuestNav.Utils.html": {
    "href": "api/QuestNav.Utils.html",
    "title": "Namespace QuestNav.Utils | QuestNav API Documentation",
    "summary": "Namespace QuestNav.Utils Classes Conversions Provides utility methods for converting between FRC and Unity coordinate systems. QuaternionExtensions Extension methods for Unity's Quaternion class to convert to array format. QueuedLogger A thread-safe logging system that queues log messages and supports deduplication of identical messages. Messages are batched and flushed to Unity's Debug system periodically. VectorExtensions Extension methods for Unity's Vector3 class to convert to array format. Enums QueuedLogger.LogLevel Defines the supported log levels for the queued logger"
  },
  "api/Wpi.Proto.Geometry2DReflection.html": {
    "href": "api/Wpi.Proto.Geometry2DReflection.html",
    "title": "Class Geometry2DReflection | QuestNav API Documentation",
    "summary": "Class Geometry2DReflection Holder for reflection information generated from geometry2d.proto Inheritance object Geometry2DReflection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Wpi.Proto Assembly: QuestNav.dll Syntax public static class Geometry2DReflection Properties Descriptor File descriptor for geometry2d.proto Declaration public static FileDescriptor Descriptor { get; } Property Value Type Description FileDescriptor"
  },
  "api/Wpi.Proto.Geometry3DReflection.html": {
    "href": "api/Wpi.Proto.Geometry3DReflection.html",
    "title": "Class Geometry3DReflection | QuestNav API Documentation",
    "summary": "Class Geometry3DReflection Holder for reflection information generated from geometry3d.proto Inheritance object Geometry3DReflection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Wpi.Proto Assembly: QuestNav.dll Syntax public static class Geometry3DReflection Properties Descriptor File descriptor for geometry3d.proto Declaration public static FileDescriptor Descriptor { get; } Property Value Type Description FileDescriptor"
  },
  "api/Wpi.Proto.ProtobufEllipse2d.html": {
    "href": "api/Wpi.Proto.ProtobufEllipse2d.html",
    "title": "Class ProtobufEllipse2d | QuestNav API Documentation",
    "summary": "Class ProtobufEllipse2d Represents a 2D ellipse with arbitrary orientation. This message defines an elliptical region in 2D space using a center pose and semi-axis lengths. The ellipse can be rotated to any orientation based on the center pose's rotation component. Geometric Properties: Center point and orientation defined by pose Major/minor axes aligned with pose's local coordinate frame X semi-axis extends along pose's X-axis (local forward direction) Y semi-axis extends along pose's Y-axis (local left direction) Total area = Ï€ * xSemiAxis * ySemiAxis Applications: Uncertainty ellipses for localization Smooth obstacle representations Robot operating regions Sensor coverage areas Path planning with uncertainty Special Cases: Circle: xSemiAxis = ySemiAxis Degenerate ellipse: one semi-axis approaches zero (becomes a line) Inheritance object ProtobufEllipse2d Implements IMessage<ProtobufEllipse2d> IEquatable<ProtobufEllipse2d> IDeepCloneable<ProtobufEllipse2d> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Wpi.Proto Assembly: QuestNav.dll Syntax public sealed class ProtobufEllipse2d : IMessage<ProtobufEllipse2d>, IEquatable<ProtobufEllipse2d>, IDeepCloneable<ProtobufEllipse2d>, IBufferMessage, IMessage Constructors ProtobufEllipse2d() Declaration public ProtobufEllipse2d() ProtobufEllipse2d(ProtobufEllipse2d) Declaration public ProtobufEllipse2d(ProtobufEllipse2d other) Parameters Type Name Description ProtobufEllipse2d other Fields CenterFieldNumber Field number for the \"center\" field. Declaration public const int CenterFieldNumber = 1 Field Value Type Description int XSemiAxisFieldNumber Field number for the \"xSemiAxis\" field. Declaration public const int XSemiAxisFieldNumber = 2 Field Value Type Description int YSemiAxisFieldNumber Field number for the \"ySemiAxis\" field. Declaration public const int YSemiAxisFieldNumber = 3 Field Value Type Description int Properties Center Center pose of the ellipse. The translation component specifies the center point of the ellipse in the coordinate system. The rotation component specifies the orientation of the ellipse's local coordinate frame. The ellipse's axes are aligned with this local coordinate frame: X semi-axis extends along local X-axis (rotated forward direction) Y semi-axis extends along local Y-axis (rotated left direction) Declaration public ProtobufPose2d Center { get; set; } Property Value Type Description ProtobufPose2d Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor Parser Declaration public static MessageParser<ProtobufEllipse2d> Parser { get; } Property Value Type Description MessageParser<ProtobufEllipse2d> XSemiAxis Semi-axis length along the ellipse's local X-axis. This is half the width of the ellipse in the direction of the center pose's forward direction (after rotation). The ellipse extends Â±xSemiAxis from the center along this axis. Units: meters Must be positive Note: This is the semi-axis, not the full width. The full width along this axis is 2 * xSemiAxis. Declaration public double XSemiAxis { get; set; } Property Value Type Description double YSemiAxis Semi-axis length along the ellipse's local Y-axis. This is half the height of the ellipse in the direction of the center pose's left direction (after rotation). The ellipse extends Â±ySemiAxis from the center along this axis. Units: meters Must be positive Note: This is the semi-axis, not the full height. The full height along this axis is 2 * ySemiAxis. Declaration public double YSemiAxis { get; set; } Property Value Type Description double Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufEllipse2d Clone() Returns Type Description ProtobufEllipse2d Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) Equals(ProtobufEllipse2d) Declaration public bool Equals(ProtobufEllipse2d other) Parameters Type Name Description ProtobufEllipse2d other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufEllipse2d) Declaration public void MergeFrom(ProtobufEllipse2d other) Parameters Type Name Description ProtobufEllipse2d other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/Wpi.Proto.ProtobufPose2d.html": {
    "href": "api/Wpi.Proto.ProtobufPose2d.html",
    "title": "Class ProtobufPose2d | QuestNav API Documentation",
    "summary": "Class ProtobufPose2d Represents a complete 2D pose (position and orientation). This message combines a 2D position (translation) with a 2D orientation (rotation) to fully describe an object's pose in the 2D plane. This is the fundamental representation for robot poses in WPILib and QuestNav. A pose answers two questions: Where is the object? (translation component) Which direction is it facing? (rotation component) Applications: Robot pose on field (primary use in QuestNav) Waypoint targets for path following Relative poses between objects Initial poses for localization The pose represents the robot's coordinate frame relative to the field coordinate frame, allowing transformation of points between the two systems. Inheritance object ProtobufPose2d Implements IMessage<ProtobufPose2d> IEquatable<ProtobufPose2d> IDeepCloneable<ProtobufPose2d> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Wpi.Proto Assembly: QuestNav.dll Syntax public sealed class ProtobufPose2d : IMessage<ProtobufPose2d>, IEquatable<ProtobufPose2d>, IDeepCloneable<ProtobufPose2d>, IBufferMessage, IMessage Constructors ProtobufPose2d() Declaration public ProtobufPose2d() ProtobufPose2d(ProtobufPose2d) Declaration public ProtobufPose2d(ProtobufPose2d other) Parameters Type Name Description ProtobufPose2d other Fields RotationFieldNumber Field number for the \"rotation\" field. Declaration public const int RotationFieldNumber = 2 Field Value Type Description int TranslationFieldNumber Field number for the \"translation\" field. Declaration public const int TranslationFieldNumber = 1 Field Value Type Description int Properties Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor Parser Declaration public static MessageParser<ProtobufPose2d> Parser { get; } Property Value Type Description MessageParser<ProtobufPose2d> Rotation Orientation component of the pose. This specifies which direction the robot is facing on the field. The rotation represents the angle between the robot's forward direction and the field's positive X-axis (forward direction). Combined with translation, this fully defines the robot's pose and allows for coordinate transformations between robot and field frames. Declaration public ProtobufRotation2d Rotation { get; set; } Property Value Type Description ProtobufRotation2d Translation Position component of the pose. This specifies where the robot is located on the field using the field coordinate system. The translation represents the position of the robot's coordinate frame origin (typically the robot center). Declaration public ProtobufTranslation2d Translation { get; set; } Property Value Type Description ProtobufTranslation2d Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufPose2d Clone() Returns Type Description ProtobufPose2d Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) Equals(ProtobufPose2d) Declaration public bool Equals(ProtobufPose2d other) Parameters Type Name Description ProtobufPose2d other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufPose2d) Declaration public void MergeFrom(ProtobufPose2d other) Parameters Type Name Description ProtobufPose2d other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/Wpi.Proto.ProtobufPose3d.html": {
    "href": "api/Wpi.Proto.ProtobufPose3d.html",
    "title": "Class ProtobufPose3d | QuestNav API Documentation",
    "summary": "Class ProtobufPose3d Represents a complete 3D pose (position and orientation). This message combines a 3D position (translation) with a 3D orientation (rotation) to fully describe an object's pose in 3D space. This extends the 2D pose concept into three dimensions for applications requiring full spatial representation. A 3D pose answers two fundamental questions: Where is the object in 3D space? (translation component) How is it oriented in 3D space? (rotation component) Applications: Camera poses for vision processing AprilTag poses in 3D space Robotic arm end-effector poses Drone/UAV poses (position and attitude) 3D object tracking and localization Sensor mounting positions and orientations The pose represents the object's coordinate frame relative to a reference coordinate frame, enabling transformation of points and vectors between the two coordinate systems. Coordinate Frame Transformation: Given a point P in the object's local frame, the corresponding point in the reference frame is: P_ref = rotation * P_local + translation Inheritance object ProtobufPose3d Implements IMessage<ProtobufPose3d> IEquatable<ProtobufPose3d> IDeepCloneable<ProtobufPose3d> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Wpi.Proto Assembly: QuestNav.dll Syntax public sealed class ProtobufPose3d : IMessage<ProtobufPose3d>, IEquatable<ProtobufPose3d>, IDeepCloneable<ProtobufPose3d>, IBufferMessage, IMessage Constructors ProtobufPose3d() Declaration public ProtobufPose3d() ProtobufPose3d(ProtobufPose3d) Declaration public ProtobufPose3d(ProtobufPose3d other) Parameters Type Name Description ProtobufPose3d other Fields RotationFieldNumber Field number for the \"rotation\" field. Declaration public const int RotationFieldNumber = 2 Field Value Type Description int TranslationFieldNumber Field number for the \"translation\" field. Declaration public const int TranslationFieldNumber = 1 Field Value Type Description int Properties Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor Parser Declaration public static MessageParser<ProtobufPose3d> Parser { get; } Property Value Type Description MessageParser<ProtobufPose3d> Rotation Orientation component of the 3D pose. This specifies how the object is oriented in 3D space relative to the reference coordinate system. The rotation represents the orientation of the object's coordinate frame relative to the reference frame. Combined with translation, this fully defines the object's pose and allows for coordinate transformations between object and reference frames. Declaration public ProtobufRotation3d Rotation { get; set; } Property Value Type Description ProtobufRotation3d Translation Position component of the 3D pose. This specifies where the object is located in 3D space using the reference coordinate system. The translation represents the position of the object's coordinate frame origin relative to the reference frame. Declaration public ProtobufTranslation3d Translation { get; set; } Property Value Type Description ProtobufTranslation3d Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufPose3d Clone() Returns Type Description ProtobufPose3d Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) Equals(ProtobufPose3d) Declaration public bool Equals(ProtobufPose3d other) Parameters Type Name Description ProtobufPose3d other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufPose3d) Declaration public void MergeFrom(ProtobufPose3d other) Parameters Type Name Description ProtobufPose3d other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/Wpi.Proto.ProtobufQuaternion.html": {
    "href": "api/Wpi.Proto.ProtobufQuaternion.html",
    "title": "Class ProtobufQuaternion | QuestNav API Documentation",
    "summary": "Class ProtobufQuaternion Represents a quaternion for 3D rotation. Quaternions provide a mathematically robust way to represent 3D rotations without the singularities (gimbal lock) that can occur with Euler angles. They are the preferred representation for 3D rotations in robotics. Mathematical Properties: Unit quaternion: wÂ² + xÂ² + yÂ² + zÂ² = 1 Represents rotation around axis (x,y,z) by angle Î¸: w = cos(Î¸/2), (x,y,z) = sin(Î¸/2) * unit_axis Identity rotation: (w=1, x=0, y=0, z=0) Conjugate: (w, -x, -y, -z) represents inverse rotation Applications: 3D object orientations IMU/gyroscope data representation Camera pose orientations Robotic arm joint orientations Smooth rotation interpolation (SLERP) Advantages over Euler angles: No gimbal lock singularities Smooth interpolation Efficient composition of rotations Numerically stable Inheritance object ProtobufQuaternion Implements IMessage<ProtobufQuaternion> IEquatable<ProtobufQuaternion> IDeepCloneable<ProtobufQuaternion> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Wpi.Proto Assembly: QuestNav.dll Syntax public sealed class ProtobufQuaternion : IMessage<ProtobufQuaternion>, IEquatable<ProtobufQuaternion>, IDeepCloneable<ProtobufQuaternion>, IBufferMessage, IMessage Constructors ProtobufQuaternion() Declaration public ProtobufQuaternion() ProtobufQuaternion(ProtobufQuaternion) Declaration public ProtobufQuaternion(ProtobufQuaternion other) Parameters Type Name Description ProtobufQuaternion other Fields WFieldNumber Field number for the \"w\" field. Declaration public const int WFieldNumber = 1 Field Value Type Description int XFieldNumber Field number for the \"x\" field. Declaration public const int XFieldNumber = 2 Field Value Type Description int YFieldNumber Field number for the \"y\" field. Declaration public const int YFieldNumber = 3 Field Value Type Description int ZFieldNumber Field number for the \"z\" field. Declaration public const int ZFieldNumber = 4 Field Value Type Description int Properties Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor Parser Declaration public static MessageParser<ProtobufQuaternion> Parser { get; } Property Value Type Description MessageParser<ProtobufQuaternion> W W component (scalar/real part) of the quaternion. This is the \"real\" or \"scalar\" component of the quaternion. For a rotation by angle Î¸ around an axis, w = cos(Î¸/2). Range: [-1, 1] for unit quaternions Identity rotation: w = 1 Declaration public double W { get; set; } Property Value Type Description double X X component (i coefficient) of the quaternion. This is the coefficient of the i basis quaternion. For a rotation by angle Î¸ around axis (ax, ay, az), x = sin(Î¸/2) * ax (where (ax, ay, az) is unit length). Range: [-1, 1] for unit quaternions Declaration public double X { get; set; } Property Value Type Description double Y Y component (j coefficient) of the quaternion. This is the coefficient of the j basis quaternion. For a rotation by angle Î¸ around axis (ax, ay, az), y = sin(Î¸/2) * ay (where (ax, ay, az) is unit length). Range: [-1, 1] for unit quaternions Declaration public double Y { get; set; } Property Value Type Description double Z Z component (k coefficient) of the quaternion. This is the coefficient of the k basis quaternion. For a rotation by angle Î¸ around axis (ax, ay, az), z = sin(Î¸/2) * az (where (ax, ay, az) is unit length). Range: [-1, 1] for unit quaternions Declaration public double Z { get; set; } Property Value Type Description double Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufQuaternion Clone() Returns Type Description ProtobufQuaternion Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) Equals(ProtobufQuaternion) Declaration public bool Equals(ProtobufQuaternion other) Parameters Type Name Description ProtobufQuaternion other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufQuaternion) Declaration public void MergeFrom(ProtobufQuaternion other) Parameters Type Name Description ProtobufQuaternion other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/Wpi.Proto.ProtobufRectangle2d.html": {
    "href": "api/Wpi.Proto.ProtobufRectangle2d.html",
    "title": "Class ProtobufRectangle2d | QuestNav API Documentation",
    "summary": "Class ProtobufRectangle2d Represents a 2D rectangle with arbitrary orientation. This message defines a rectangular region in 2D space using a center pose and width/height dimensions. The rectangle can be rotated to any orientation based on the center pose's rotation component. Geometric Properties: Center point and orientation defined by pose Width extends along the pose's X-axis (local forward direction) Height extends along the pose's Y-axis (local left direction) Total area = xWidth * yWidth Applications: Robot footprint representation Obstacle and keep-out zone definitions Field element boundaries Collision detection regions Path planning constraints Inheritance object ProtobufRectangle2d Implements IMessage<ProtobufRectangle2d> IEquatable<ProtobufRectangle2d> IDeepCloneable<ProtobufRectangle2d> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Wpi.Proto Assembly: QuestNav.dll Syntax public sealed class ProtobufRectangle2d : IMessage<ProtobufRectangle2d>, IEquatable<ProtobufRectangle2d>, IDeepCloneable<ProtobufRectangle2d>, IBufferMessage, IMessage Constructors ProtobufRectangle2d() Declaration public ProtobufRectangle2d() ProtobufRectangle2d(ProtobufRectangle2d) Declaration public ProtobufRectangle2d(ProtobufRectangle2d other) Parameters Type Name Description ProtobufRectangle2d other Fields CenterFieldNumber Field number for the \"center\" field. Declaration public const int CenterFieldNumber = 1 Field Value Type Description int XWidthFieldNumber Field number for the \"xWidth\" field. Declaration public const int XWidthFieldNumber = 2 Field Value Type Description int YWidthFieldNumber Field number for the \"yWidth\" field. Declaration public const int YWidthFieldNumber = 3 Field Value Type Description int Properties Center Center pose of the rectangle. The translation component specifies the center point of the rectangle in the coordinate system. The rotation component specifies the orientation of the rectangle's local coordinate frame. The rectangle's edges are aligned with this local coordinate frame: Width extends along local X-axis (rotated forward direction) Height extends along local Y-axis (rotated left direction) Declaration public ProtobufPose2d Center { get; set; } Property Value Type Description ProtobufPose2d Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor Parser Declaration public static MessageParser<ProtobufRectangle2d> Parser { get; } Property Value Type Description MessageParser<ProtobufRectangle2d> XWidth Width of the rectangle along its local X-axis. This is the dimension of the rectangle in the direction of the center pose's forward direction (after rotation). The rectangle extends Â±xWidth/2 from the center along this axis. Units: meters Must be positive Declaration public double XWidth { get; set; } Property Value Type Description double YWidth Height of the rectangle along its local Y-axis. This is the dimension of the rectangle in the direction of the center pose's left direction (after rotation). The rectangle extends Â±yWidth/2 from the center along this axis. Units: meters Must be positive Declaration public double YWidth { get; set; } Property Value Type Description double Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufRectangle2d Clone() Returns Type Description ProtobufRectangle2d Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) Equals(ProtobufRectangle2d) Declaration public bool Equals(ProtobufRectangle2d other) Parameters Type Name Description ProtobufRectangle2d other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufRectangle2d) Declaration public void MergeFrom(ProtobufRectangle2d other) Parameters Type Name Description ProtobufRectangle2d other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/Wpi.Proto.ProtobufRotation2d.html": {
    "href": "api/Wpi.Proto.ProtobufRotation2d.html",
    "title": "Class ProtobufRotation2d | QuestNav API Documentation",
    "summary": "Class ProtobufRotation2d Represents a 2D rotation angle. This message encodes a rotation in the 2D plane using a single angle value. It follows the standard mathematical convention for angle measurement and is used to represent orientations and rotational displacements. Applications: Robot heading/orientation on field Rotational component of poses and transforms Angular displacement between orientations Waypoint headings Angle Convention: 0 radians: Facing positive X direction (forward on field) Ï€/2 radians: Facing positive Y direction (left on field) Ï€ radians: Facing negative X direction (backward on field) 3Ï€/2 radians: Facing negative Y direction (right on field) Counter-clockwise rotation is positive Inheritance object ProtobufRotation2d Implements IMessage<ProtobufRotation2d> IEquatable<ProtobufRotation2d> IDeepCloneable<ProtobufRotation2d> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Wpi.Proto Assembly: QuestNav.dll Syntax public sealed class ProtobufRotation2d : IMessage<ProtobufRotation2d>, IEquatable<ProtobufRotation2d>, IDeepCloneable<ProtobufRotation2d>, IBufferMessage, IMessage Constructors ProtobufRotation2d() Declaration public ProtobufRotation2d() ProtobufRotation2d(ProtobufRotation2d) Declaration public ProtobufRotation2d(ProtobufRotation2d other) Parameters Type Name Description ProtobufRotation2d other Fields ValueFieldNumber Field number for the \"value\" field. Declaration public const int ValueFieldNumber = 1 Field Value Type Description int Properties Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor Parser Declaration public static MessageParser<ProtobufRotation2d> Parser { get; } Property Value Type Description MessageParser<ProtobufRotation2d> Value Rotation angle in radians. The angle is measured counter-clockwise from the positive X-axis. Range: Typically -Ï€ to Ï€, but can represent any angle value. Examples: 0.0: Facing forward (positive X) Ï€/2: Facing left (positive Y) Ï€: Facing backward (negative X) -Ï€/2 or 3Ï€/2: Facing right (negative Y) Units: radians Declaration public double Value { get; set; } Property Value Type Description double Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufRotation2d Clone() Returns Type Description ProtobufRotation2d Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) Equals(ProtobufRotation2d) Declaration public bool Equals(ProtobufRotation2d other) Parameters Type Name Description ProtobufRotation2d other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufRotation2d) Declaration public void MergeFrom(ProtobufRotation2d other) Parameters Type Name Description ProtobufRotation2d other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/Wpi.Proto.ProtobufRotation3d.html": {
    "href": "api/Wpi.Proto.ProtobufRotation3d.html",
    "title": "Class ProtobufRotation3d | QuestNav API Documentation",
    "summary": "Class ProtobufRotation3d Represents a 3D rotation using a quaternion. This message wraps a quaternion to represent 3D rotations in a standardized way. It provides a clean interface for 3D rotation operations while leveraging the mathematical advantages of quaternions internally. The rotation represents the orientation of a coordinate frame relative to a reference frame, or the rotation needed to transform vectors from one coordinate system to another. Applications: Object orientations in 3D space Camera pose rotations IMU orientation data Robotic arm end-effector orientations Transformation between coordinate frames Mathematical Operations: Composition: R3 = R2 * R1 (apply R1 first, then R2) Inverse: R^(-1) represents the opposite rotation Identity: No rotation (quaternion w=1, x=y=z=0) Inheritance object ProtobufRotation3d Implements IMessage<ProtobufRotation3d> IEquatable<ProtobufRotation3d> IDeepCloneable<ProtobufRotation3d> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Wpi.Proto Assembly: QuestNav.dll Syntax public sealed class ProtobufRotation3d : IMessage<ProtobufRotation3d>, IEquatable<ProtobufRotation3d>, IDeepCloneable<ProtobufRotation3d>, IBufferMessage, IMessage Constructors ProtobufRotation3d() Declaration public ProtobufRotation3d() ProtobufRotation3d(ProtobufRotation3d) Declaration public ProtobufRotation3d(ProtobufRotation3d other) Parameters Type Name Description ProtobufRotation3d other Fields QFieldNumber Field number for the \"q\" field. Declaration public const int QFieldNumber = 1 Field Value Type Description int Properties Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor Parser Declaration public static MessageParser<ProtobufRotation3d> Parser { get; } Property Value Type Description MessageParser<ProtobufRotation3d> Q Quaternion representing the 3D rotation. This quaternion should be normalized (unit quaternion) to represent a valid rotation. Non-unit quaternions may lead to scaling effects in addition to rotation. The quaternion represents the rotation from the reference coordinate frame to the rotated coordinate frame. Declaration public ProtobufQuaternion Q { get; set; } Property Value Type Description ProtobufQuaternion Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufRotation3d Clone() Returns Type Description ProtobufRotation3d Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) Equals(ProtobufRotation3d) Declaration public bool Equals(ProtobufRotation3d other) Parameters Type Name Description ProtobufRotation3d other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufRotation3d) Declaration public void MergeFrom(ProtobufRotation3d other) Parameters Type Name Description ProtobufRotation3d other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/Wpi.Proto.ProtobufTransform2d.html": {
    "href": "api/Wpi.Proto.ProtobufTransform2d.html",
    "title": "Class ProtobufTransform2d | QuestNav API Documentation",
    "summary": "Class ProtobufTransform2d Represents a 2D coordinate transformation. This message describes how to transform coordinates from one 2D coordinate frame to another. It combines a translation and rotation to define the relationship between two coordinate systems. Mathematical Interpretation: Given a point P in frame A, the corresponding point in frame B is: P_B = Transform2d * P_A = Rotation * P_A + Translation Applications: Transform between robot and field coordinate frames Relative positioning between objects Coordinate frame conversions in path planning Sensor calibration and mounting offsets The transform represents \"how to get from frame A to frame B\" and can be inverted to get the reverse transformation. Inheritance object ProtobufTransform2d Implements IMessage<ProtobufTransform2d> IEquatable<ProtobufTransform2d> IDeepCloneable<ProtobufTransform2d> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Wpi.Proto Assembly: QuestNav.dll Syntax public sealed class ProtobufTransform2d : IMessage<ProtobufTransform2d>, IEquatable<ProtobufTransform2d>, IDeepCloneable<ProtobufTransform2d>, IBufferMessage, IMessage Constructors ProtobufTransform2d() Declaration public ProtobufTransform2d() ProtobufTransform2d(ProtobufTransform2d) Declaration public ProtobufTransform2d(ProtobufTransform2d other) Parameters Type Name Description ProtobufTransform2d other Fields RotationFieldNumber Field number for the \"rotation\" field. Declaration public const int RotationFieldNumber = 2 Field Value Type Description int TranslationFieldNumber Field number for the \"translation\" field. Declaration public const int TranslationFieldNumber = 1 Field Value Type Description int Properties Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor Parser Declaration public static MessageParser<ProtobufTransform2d> Parser { get; } Property Value Type Description MessageParser<ProtobufTransform2d> Rotation Rotation component of the transformation. This represents the angular difference between the two coordinate frames. It specifies how much the target frame is rotated relative to the source frame. The rotation is applied before the translation in the transformation sequence (standard mathematical convention). Declaration public ProtobufRotation2d Rotation { get; set; } Property Value Type Description ProtobufRotation2d Translation Translation component of the transformation. This represents the displacement between the origins of the two coordinate frames. It specifies how far and in which direction the target frame's origin is from the source frame's origin. Declaration public ProtobufTranslation2d Translation { get; set; } Property Value Type Description ProtobufTranslation2d Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufTransform2d Clone() Returns Type Description ProtobufTransform2d Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) Equals(ProtobufTransform2d) Declaration public bool Equals(ProtobufTransform2d other) Parameters Type Name Description ProtobufTransform2d other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufTransform2d) Declaration public void MergeFrom(ProtobufTransform2d other) Parameters Type Name Description ProtobufTransform2d other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/Wpi.Proto.ProtobufTransform3d.html": {
    "href": "api/Wpi.Proto.ProtobufTransform3d.html",
    "title": "Class ProtobufTransform3d | QuestNav API Documentation",
    "summary": "Class ProtobufTransform3d Represents a 3D coordinate transformation. This message describes how to transform coordinates from one 3D coordinate frame to another. It combines a 3D translation and rotation to define the complete spatial relationship between two coordinate systems. Mathematical Interpretation: Given a point P in frame A, the corresponding point in frame B is: P_B = Transform3d * P_A = Rotation * P_A + Translation This follows the standard transformation sequence: Apply rotation to the point Add translation to the rotated point Applications: Transform between robot and world coordinate frames Camera calibration and extrinsic parameters Sensor mounting transformations Relative positioning between 3D objects Coordinate frame conversions in 3D path planning Multi-robot relative localization The transform represents \"how to get from frame A to frame B\" and can be inverted to get the reverse transformation. Transforms can also be composed to create transformation chains through multiple coordinate frames. Inheritance object ProtobufTransform3d Implements IMessage<ProtobufTransform3d> IEquatable<ProtobufTransform3d> IDeepCloneable<ProtobufTransform3d> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Wpi.Proto Assembly: QuestNav.dll Syntax public sealed class ProtobufTransform3d : IMessage<ProtobufTransform3d>, IEquatable<ProtobufTransform3d>, IDeepCloneable<ProtobufTransform3d>, IBufferMessage, IMessage Constructors ProtobufTransform3d() Declaration public ProtobufTransform3d() ProtobufTransform3d(ProtobufTransform3d) Declaration public ProtobufTransform3d(ProtobufTransform3d other) Parameters Type Name Description ProtobufTransform3d other Fields RotationFieldNumber Field number for the \"rotation\" field. Declaration public const int RotationFieldNumber = 2 Field Value Type Description int TranslationFieldNumber Field number for the \"translation\" field. Declaration public const int TranslationFieldNumber = 1 Field Value Type Description int Properties Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor Parser Declaration public static MessageParser<ProtobufTransform3d> Parser { get; } Property Value Type Description MessageParser<ProtobufTransform3d> Rotation Rotation component of the 3D transformation. This represents the angular difference between the two coordinate frames in 3D space. It specifies how the target frame is rotated relative to the source frame. The rotation is applied before the translation in the transformation sequence (standard mathematical convention for homogeneous transforms). Declaration public ProtobufRotation3d Rotation { get; set; } Property Value Type Description ProtobufRotation3d Translation Translation component of the 3D transformation. This represents the displacement between the origins of the two coordinate frames in 3D space. It specifies how far and in which direction the target frame's origin is from the source frame's origin. Declaration public ProtobufTranslation3d Translation { get; set; } Property Value Type Description ProtobufTranslation3d Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufTransform3d Clone() Returns Type Description ProtobufTransform3d Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) Equals(ProtobufTransform3d) Declaration public bool Equals(ProtobufTransform3d other) Parameters Type Name Description ProtobufTransform3d other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufTransform3d) Declaration public void MergeFrom(ProtobufTransform3d other) Parameters Type Name Description ProtobufTransform3d other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/Wpi.Proto.ProtobufTranslation2d.html": {
    "href": "api/Wpi.Proto.ProtobufTranslation2d.html",
    "title": "Class ProtobufTranslation2d | QuestNav API Documentation",
    "summary": "Class ProtobufTranslation2d Represents a 2D translation (displacement) vector. This message encodes a 2D displacement or position vector using Cartesian coordinates. It's used as a building block for more complex geometric representations like poses and transforms. Applications: Robot position on field Displacement between two points Velocity vectors (when representing change in position) Waypoint coordinates Coordinate System: X: Forward/backward displacement (positive = forward) Y: Left/right displacement (positive = left) Units: meters Inheritance object ProtobufTranslation2d Implements IMessage<ProtobufTranslation2d> IEquatable<ProtobufTranslation2d> IDeepCloneable<ProtobufTranslation2d> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Wpi.Proto Assembly: QuestNav.dll Syntax public sealed class ProtobufTranslation2d : IMessage<ProtobufTranslation2d>, IEquatable<ProtobufTranslation2d>, IDeepCloneable<ProtobufTranslation2d>, IBufferMessage, IMessage Constructors ProtobufTranslation2d() Declaration public ProtobufTranslation2d() ProtobufTranslation2d(ProtobufTranslation2d) Declaration public ProtobufTranslation2d(ProtobufTranslation2d other) Parameters Type Name Description ProtobufTranslation2d other Fields XFieldNumber Field number for the \"x\" field. Declaration public const int XFieldNumber = 1 Field Value Type Description int YFieldNumber Field number for the \"y\" field. Declaration public const int YFieldNumber = 2 Field Value Type Description int Properties Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor Parser Declaration public static MessageParser<ProtobufTranslation2d> Parser { get; } Property Value Type Description MessageParser<ProtobufTranslation2d> X X-coordinate (forward/backward displacement). Positive values indicate forward direction (towards opposing alliance). Negative values indicate backward direction. Units: meters Declaration public double X { get; set; } Property Value Type Description double Y Y-coordinate (left/right displacement). Positive values indicate leftward direction (when facing forward). Negative values indicate rightward direction. Units: meters Declaration public double Y { get; set; } Property Value Type Description double Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufTranslation2d Clone() Returns Type Description ProtobufTranslation2d Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) Equals(ProtobufTranslation2d) Declaration public bool Equals(ProtobufTranslation2d other) Parameters Type Name Description ProtobufTranslation2d other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufTranslation2d) Declaration public void MergeFrom(ProtobufTranslation2d other) Parameters Type Name Description ProtobufTranslation2d other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/Wpi.Proto.ProtobufTranslation3d.html": {
    "href": "api/Wpi.Proto.ProtobufTranslation3d.html",
    "title": "Class ProtobufTranslation3d | QuestNav API Documentation",
    "summary": "Class ProtobufTranslation3d Represents a 3D translation (displacement) vector. This message encodes a 3D displacement or position vector using Cartesian coordinates. It extends the 2D translation concept into three dimensions and serves as a building block for more complex 3D geometric representations. Applications: 3D object positions in space Displacement vectors between 3D points 3D velocity vectors (when representing change in position) Camera/sensor positions relative to robot AprilTag positions in 3D space Coordinate System: X: Forward/backward displacement (positive = forward) Y: Left/right displacement (positive = left) Z: Up/down displacement (positive = up) Units: meters Inheritance object ProtobufTranslation3d Implements IMessage<ProtobufTranslation3d> IEquatable<ProtobufTranslation3d> IDeepCloneable<ProtobufTranslation3d> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Wpi.Proto Assembly: QuestNav.dll Syntax public sealed class ProtobufTranslation3d : IMessage<ProtobufTranslation3d>, IEquatable<ProtobufTranslation3d>, IDeepCloneable<ProtobufTranslation3d>, IBufferMessage, IMessage Constructors ProtobufTranslation3d() Declaration public ProtobufTranslation3d() ProtobufTranslation3d(ProtobufTranslation3d) Declaration public ProtobufTranslation3d(ProtobufTranslation3d other) Parameters Type Name Description ProtobufTranslation3d other Fields XFieldNumber Field number for the \"x\" field. Declaration public const int XFieldNumber = 1 Field Value Type Description int YFieldNumber Field number for the \"y\" field. Declaration public const int YFieldNumber = 2 Field Value Type Description int ZFieldNumber Field number for the \"z\" field. Declaration public const int ZFieldNumber = 3 Field Value Type Description int Properties Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor Parser Declaration public static MessageParser<ProtobufTranslation3d> Parser { get; } Property Value Type Description MessageParser<ProtobufTranslation3d> X X-coordinate (forward/backward displacement). Positive values indicate forward direction. Negative values indicate backward direction. Units: meters Declaration public double X { get; set; } Property Value Type Description double Y Y-coordinate (left/right displacement). Positive values indicate leftward direction. Negative values indicate rightward direction. Units: meters Declaration public double Y { get; set; } Property Value Type Description double Z Z-coordinate (up/down displacement). Positive values indicate upward direction. Negative values indicate downward direction. Units: meters Declaration public double Z { get; set; } Property Value Type Description double Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufTranslation3d Clone() Returns Type Description ProtobufTranslation3d Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) Equals(ProtobufTranslation3d) Declaration public bool Equals(ProtobufTranslation3d other) Parameters Type Name Description ProtobufTranslation3d other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufTranslation3d) Declaration public void MergeFrom(ProtobufTranslation3d other) Parameters Type Name Description ProtobufTranslation3d other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/Wpi.Proto.ProtobufTwist2d.html": {
    "href": "api/Wpi.Proto.ProtobufTwist2d.html",
    "title": "Class ProtobufTwist2d | QuestNav API Documentation",
    "summary": "Class ProtobufTwist2d Represents a 2D twist (velocity in 2D space). This message encodes the instantaneous velocity of an object in 2D space, including both linear and angular velocity components. It describes how an object's pose is changing over time. Mathematical Interpretation: The twist represents the time derivative of pose: dx/dt: Rate of change in X position dy/dt: Rate of change in Y position dÎ¸/dt: Rate of change in orientation Applications: Robot velocity commands for motion control Velocity feedback from odometry systems Velocity constraints in path planning Dynamic modeling and simulation Coordinate Frame: The twist can be expressed in different coordinate frames (robot-relative or field-relative) depending on the application context. Inheritance object ProtobufTwist2d Implements IMessage<ProtobufTwist2d> IEquatable<ProtobufTwist2d> IDeepCloneable<ProtobufTwist2d> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Wpi.Proto Assembly: QuestNav.dll Syntax public sealed class ProtobufTwist2d : IMessage<ProtobufTwist2d>, IEquatable<ProtobufTwist2d>, IDeepCloneable<ProtobufTwist2d>, IBufferMessage, IMessage Constructors ProtobufTwist2d() Declaration public ProtobufTwist2d() ProtobufTwist2d(ProtobufTwist2d) Declaration public ProtobufTwist2d(ProtobufTwist2d other) Parameters Type Name Description ProtobufTwist2d other Fields DthetaFieldNumber Field number for the \"dtheta\" field. Declaration public const int DthetaFieldNumber = 3 Field Value Type Description int DxFieldNumber Field number for the \"dx\" field. Declaration public const int DxFieldNumber = 1 Field Value Type Description int DyFieldNumber Field number for the \"dy\" field. Declaration public const int DyFieldNumber = 2 Field Value Type Description int Properties Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor Dtheta Angular velocity (rate of rotation). Rate of change of orientation over time. This represents how fast the object is rotating in the 2D plane. Positive values: Counter-clockwise rotation Negative values: Clockwise rotation Units: radians per second Declaration public double Dtheta { get; set; } Property Value Type Description double Dx Linear velocity in X direction. Rate of change of X position over time. In field coordinates, this represents forward/backward velocity. Positive values: Moving in positive X direction (forward) Negative values: Moving in negative X direction (backward) Units: meters per second Declaration public double Dx { get; set; } Property Value Type Description double Dy Linear velocity in Y direction. Rate of change of Y position over time. In field coordinates, this represents left/right velocity (strafing). Positive values: Moving in positive Y direction (left) Negative values: Moving in negative Y direction (right) Units: meters per second Declaration public double Dy { get; set; } Property Value Type Description double Parser Declaration public static MessageParser<ProtobufTwist2d> Parser { get; } Property Value Type Description MessageParser<ProtobufTwist2d> Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufTwist2d Clone() Returns Type Description ProtobufTwist2d Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) Equals(ProtobufTwist2d) Declaration public bool Equals(ProtobufTwist2d other) Parameters Type Name Description ProtobufTwist2d other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufTwist2d) Declaration public void MergeFrom(ProtobufTwist2d other) Parameters Type Name Description ProtobufTwist2d other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/Wpi.Proto.ProtobufTwist3d.html": {
    "href": "api/Wpi.Proto.ProtobufTwist3d.html",
    "title": "Class ProtobufTwist3d | QuestNav API Documentation",
    "summary": "Class ProtobufTwist3d Represents a 3D twist (velocity in 3D space). This message encodes the instantaneous velocity of an object in 3D space, including both linear and angular velocity components. It describes how an object's 3D pose is changing over time, extending the 2D twist concept into three dimensions. Mathematical Interpretation: The twist represents the time derivative of 3D pose: Linear velocity: (dx/dt, dy/dt, dz/dt) Angular velocity: (rx, ry, rz) as rotation rates about each axis Applications: 3D robot velocity commands (drones, robotic arms) 3D velocity feedback from odometry systems Velocity constraints in 3D path planning Dynamic modeling and simulation in 3D IMU angular velocity data representation Camera motion estimation Coordinate Frame: The twist can be expressed in different coordinate frames (body-relative or world-relative) depending on the application context. The angular velocity components represent rotation rates about the coordinate axes. Inheritance object ProtobufTwist3d Implements IMessage<ProtobufTwist3d> IEquatable<ProtobufTwist3d> IDeepCloneable<ProtobufTwist3d> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Wpi.Proto Assembly: QuestNav.dll Syntax public sealed class ProtobufTwist3d : IMessage<ProtobufTwist3d>, IEquatable<ProtobufTwist3d>, IDeepCloneable<ProtobufTwist3d>, IBufferMessage, IMessage Constructors ProtobufTwist3d() Declaration public ProtobufTwist3d() ProtobufTwist3d(ProtobufTwist3d) Declaration public ProtobufTwist3d(ProtobufTwist3d other) Parameters Type Name Description ProtobufTwist3d other Fields DxFieldNumber Field number for the \"dx\" field. Declaration public const int DxFieldNumber = 1 Field Value Type Description int DyFieldNumber Field number for the \"dy\" field. Declaration public const int DyFieldNumber = 2 Field Value Type Description int DzFieldNumber Field number for the \"dz\" field. Declaration public const int DzFieldNumber = 3 Field Value Type Description int RxFieldNumber Field number for the \"rx\" field. Declaration public const int RxFieldNumber = 4 Field Value Type Description int RyFieldNumber Field number for the \"ry\" field. Declaration public const int RyFieldNumber = 5 Field Value Type Description int RzFieldNumber Field number for the \"rz\" field. Declaration public const int RzFieldNumber = 6 Field Value Type Description int Properties Descriptor Declaration public static MessageDescriptor Descriptor { get; } Property Value Type Description MessageDescriptor Dx Linear velocity in X direction. Rate of change of X position over time. In world coordinates, this represents forward/backward velocity. Positive values: Moving in positive X direction (forward) Negative values: Moving in negative X direction (backward) Units: meters per second Declaration public double Dx { get; set; } Property Value Type Description double Dy Linear velocity in Y direction. Rate of change of Y position over time. In world coordinates, this represents left/right velocity (strafing). Positive values: Moving in positive Y direction (left) Negative values: Moving in negative Y direction (right) Units: meters per second Declaration public double Dy { get; set; } Property Value Type Description double Dz Linear velocity in Z direction. Rate of change of Z position over time. In world coordinates, this represents up/down velocity (climbing/descending). Positive values: Moving in positive Z direction (up) Negative values: Moving in negative Z direction (down) Units: meters per second Declaration public double Dz { get; set; } Property Value Type Description double Parser Declaration public static MessageParser<ProtobufTwist3d> Parser { get; } Property Value Type Description MessageParser<ProtobufTwist3d> Rx Angular velocity about X-axis (roll rate). Rate of rotation about the X-axis. This represents how fast the object is rolling (rotating around its forward axis). Positive values: Counter-clockwise rotation when looking down the positive X-axis Negative values: Clockwise rotation when looking down the positive X-axis Units: radians per second Declaration public double Rx { get; set; } Property Value Type Description double Ry Angular velocity about Y-axis (pitch rate). Rate of rotation about the Y-axis. This represents how fast the object is pitching (nose up/down motion). Positive values: Counter-clockwise rotation when looking down the positive Y-axis Negative values: Clockwise rotation when looking down the positive Y-axis Units: radians per second Declaration public double Ry { get; set; } Property Value Type Description double Rz Angular velocity about Z-axis (yaw rate). Rate of rotation about the Z-axis. This represents how fast the object is yawing (turning left/right). Positive values: Counter-clockwise rotation when looking down the positive Z-axis Negative values: Clockwise rotation when looking down the positive Z-axis Units: radians per second Declaration public double Rz { get; set; } Property Value Type Description double Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description int Clone() Declaration public ProtobufTwist3d Clone() Returns Type Description ProtobufTwist3d Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) Equals(ProtobufTwist3d) Declaration public bool Equals(ProtobufTwist3d other) Parameters Type Name Description ProtobufTwist3d other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() MergeFrom(CodedInputStream) Declaration public void MergeFrom(CodedInputStream input) Parameters Type Name Description CodedInputStream input MergeFrom(ProtobufTwist3d) Declaration public void MergeFrom(ProtobufTwist3d other) Parameters Type Name Description ProtobufTwist3d other ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() WriteTo(CodedOutputStream) Declaration public void WriteTo(CodedOutputStream output) Parameters Type Name Description CodedOutputStream output Implements Google.Protobuf.IMessage<T> IEquatable<T> Google.Protobuf.IDeepCloneable<T> Google.Protobuf.IBufferMessage Google.Protobuf.IMessage"
  },
  "api/Wpi.Proto.html": {
    "href": "api/Wpi.Proto.html",
    "title": "Namespace Wpi.Proto | QuestNav API Documentation",
    "summary": "Namespace Wpi.Proto Classes Geometry2DReflection Holder for reflection information generated from geometry2d.proto Geometry3DReflection Holder for reflection information generated from geometry3d.proto ProtobufEllipse2d Represents a 2D ellipse with arbitrary orientation. This message defines an elliptical region in 2D space using a center pose and semi-axis lengths. The ellipse can be rotated to any orientation based on the center pose's rotation component. Geometric Properties: Center point and orientation defined by pose Major/minor axes aligned with pose's local coordinate frame X semi-axis extends along pose's X-axis (local forward direction) Y semi-axis extends along pose's Y-axis (local left direction) Total area = Ï€ * xSemiAxis * ySemiAxis Applications: Uncertainty ellipses for localization Smooth obstacle representations Robot operating regions Sensor coverage areas Path planning with uncertainty Special Cases: Circle: xSemiAxis = ySemiAxis Degenerate ellipse: one semi-axis approaches zero (becomes a line) ProtobufPose2d Represents a complete 2D pose (position and orientation). This message combines a 2D position (translation) with a 2D orientation (rotation) to fully describe an object's pose in the 2D plane. This is the fundamental representation for robot poses in WPILib and QuestNav. A pose answers two questions: Where is the object? (translation component) Which direction is it facing? (rotation component) Applications: Robot pose on field (primary use in QuestNav) Waypoint targets for path following Relative poses between objects Initial poses for localization The pose represents the robot's coordinate frame relative to the field coordinate frame, allowing transformation of points between the two systems. ProtobufPose3d Represents a complete 3D pose (position and orientation). This message combines a 3D position (translation) with a 3D orientation (rotation) to fully describe an object's pose in 3D space. This extends the 2D pose concept into three dimensions for applications requiring full spatial representation. A 3D pose answers two fundamental questions: Where is the object in 3D space? (translation component) How is it oriented in 3D space? (rotation component) Applications: Camera poses for vision processing AprilTag poses in 3D space Robotic arm end-effector poses Drone/UAV poses (position and attitude) 3D object tracking and localization Sensor mounting positions and orientations The pose represents the object's coordinate frame relative to a reference coordinate frame, enabling transformation of points and vectors between the two coordinate systems. Coordinate Frame Transformation: Given a point P in the object's local frame, the corresponding point in the reference frame is: P_ref = rotation * P_local + translation ProtobufQuaternion Represents a quaternion for 3D rotation. Quaternions provide a mathematically robust way to represent 3D rotations without the singularities (gimbal lock) that can occur with Euler angles. They are the preferred representation for 3D rotations in robotics. Mathematical Properties: Unit quaternion: wÂ² + xÂ² + yÂ² + zÂ² = 1 Represents rotation around axis (x,y,z) by angle Î¸: w = cos(Î¸/2), (x,y,z) = sin(Î¸/2) * unit_axis Identity rotation: (w=1, x=0, y=0, z=0) Conjugate: (w, -x, -y, -z) represents inverse rotation Applications: 3D object orientations IMU/gyroscope data representation Camera pose orientations Robotic arm joint orientations Smooth rotation interpolation (SLERP) Advantages over Euler angles: No gimbal lock singularities Smooth interpolation Efficient composition of rotations Numerically stable ProtobufRectangle2d Represents a 2D rectangle with arbitrary orientation. This message defines a rectangular region in 2D space using a center pose and width/height dimensions. The rectangle can be rotated to any orientation based on the center pose's rotation component. Geometric Properties: Center point and orientation defined by pose Width extends along the pose's X-axis (local forward direction) Height extends along the pose's Y-axis (local left direction) Total area = xWidth * yWidth Applications: Robot footprint representation Obstacle and keep-out zone definitions Field element boundaries Collision detection regions Path planning constraints ProtobufRotation2d Represents a 2D rotation angle. This message encodes a rotation in the 2D plane using a single angle value. It follows the standard mathematical convention for angle measurement and is used to represent orientations and rotational displacements. Applications: Robot heading/orientation on field Rotational component of poses and transforms Angular displacement between orientations Waypoint headings Angle Convention: 0 radians: Facing positive X direction (forward on field) Ï€/2 radians: Facing positive Y direction (left on field) Ï€ radians: Facing negative X direction (backward on field) 3Ï€/2 radians: Facing negative Y direction (right on field) Counter-clockwise rotation is positive ProtobufRotation3d Represents a 3D rotation using a quaternion. This message wraps a quaternion to represent 3D rotations in a standardized way. It provides a clean interface for 3D rotation operations while leveraging the mathematical advantages of quaternions internally. The rotation represents the orientation of a coordinate frame relative to a reference frame, or the rotation needed to transform vectors from one coordinate system to another. Applications: Object orientations in 3D space Camera pose rotations IMU orientation data Robotic arm end-effector orientations Transformation between coordinate frames Mathematical Operations: Composition: R3 = R2 * R1 (apply R1 first, then R2) Inverse: R^(-1) represents the opposite rotation Identity: No rotation (quaternion w=1, x=y=z=0) ProtobufTransform2d Represents a 2D coordinate transformation. This message describes how to transform coordinates from one 2D coordinate frame to another. It combines a translation and rotation to define the relationship between two coordinate systems. Mathematical Interpretation: Given a point P in frame A, the corresponding point in frame B is: P_B = Transform2d * P_A = Rotation * P_A + Translation Applications: Transform between robot and field coordinate frames Relative positioning between objects Coordinate frame conversions in path planning Sensor calibration and mounting offsets The transform represents \"how to get from frame A to frame B\" and can be inverted to get the reverse transformation. ProtobufTransform3d Represents a 3D coordinate transformation. This message describes how to transform coordinates from one 3D coordinate frame to another. It combines a 3D translation and rotation to define the complete spatial relationship between two coordinate systems. Mathematical Interpretation: Given a point P in frame A, the corresponding point in frame B is: P_B = Transform3d * P_A = Rotation * P_A + Translation This follows the standard transformation sequence: Apply rotation to the point Add translation to the rotated point Applications: Transform between robot and world coordinate frames Camera calibration and extrinsic parameters Sensor mounting transformations Relative positioning between 3D objects Coordinate frame conversions in 3D path planning Multi-robot relative localization The transform represents \"how to get from frame A to frame B\" and can be inverted to get the reverse transformation. Transforms can also be composed to create transformation chains through multiple coordinate frames. ProtobufTranslation2d Represents a 2D translation (displacement) vector. This message encodes a 2D displacement or position vector using Cartesian coordinates. It's used as a building block for more complex geometric representations like poses and transforms. Applications: Robot position on field Displacement between two points Velocity vectors (when representing change in position) Waypoint coordinates Coordinate System: X: Forward/backward displacement (positive = forward) Y: Left/right displacement (positive = left) Units: meters ProtobufTranslation3d Represents a 3D translation (displacement) vector. This message encodes a 3D displacement or position vector using Cartesian coordinates. It extends the 2D translation concept into three dimensions and serves as a building block for more complex 3D geometric representations. Applications: 3D object positions in space Displacement vectors between 3D points 3D velocity vectors (when representing change in position) Camera/sensor positions relative to robot AprilTag positions in 3D space Coordinate System: X: Forward/backward displacement (positive = forward) Y: Left/right displacement (positive = left) Z: Up/down displacement (positive = up) Units: meters ProtobufTwist2d Represents a 2D twist (velocity in 2D space). This message encodes the instantaneous velocity of an object in 2D space, including both linear and angular velocity components. It describes how an object's pose is changing over time. Mathematical Interpretation: The twist represents the time derivative of pose: dx/dt: Rate of change in X position dy/dt: Rate of change in Y position dÎ¸/dt: Rate of change in orientation Applications: Robot velocity commands for motion control Velocity feedback from odometry systems Velocity constraints in path planning Dynamic modeling and simulation Coordinate Frame: The twist can be expressed in different coordinate frames (robot-relative or field-relative) depending on the application context. ProtobufTwist3d Represents a 3D twist (velocity in 3D space). This message encodes the instantaneous velocity of an object in 3D space, including both linear and angular velocity components. It describes how an object's 3D pose is changing over time, extending the 2D twist concept into three dimensions. Mathematical Interpretation: The twist represents the time derivative of 3D pose: Linear velocity: (dx/dt, dy/dt, dz/dt) Angular velocity: (rx, ry, rz) as rotation rates about each axis Applications: 3D robot velocity commands (drones, robotic arms) 3D velocity feedback from odometry systems Velocity constraints in 3D path planning Dynamic modeling and simulation in 3D IMU angular velocity data representation Camera motion estimation Coordinate Frame: The twist can be expressed in different coordinate frames (body-relative or world-relative) depending on the application context. The angular velocity components represent rotation rates about the coordinate axes."
  },
  "index.html": {
    "href": "index.html",
    "title": "QuestNav API Documentation | QuestNav API Documentation",
    "summary": "QuestNav API Documentation This is the API reference documentation for QuestNav, automatically generated from XML documentation comments in the source code. Overview QuestNav is a Unity-based VR application that streams real-time position and orientation data from Meta Quest headsets to FRC robots via NetworkTables. API Reference Explore the API documentation to browse all available classes, methods, and properties. Use the navigation menu to access different namespaces and types. Key Namespaces QuestNav.Core - Main application logic and constants QuestNav.Commands - Command processing system QuestNav.Network - NetworkTables communication QuestNav.UI - User interface management QuestNav.Utils - Utility functions and extensions QuestNav.Native.NTCore - Native NetworkTables bindings QuestNav.Protos.Generated - Protocol buffer generated classes Main Documentation For complete documentation including setup guides, tutorials, and examples, visit the main QuestNav documentation site."
  }
}