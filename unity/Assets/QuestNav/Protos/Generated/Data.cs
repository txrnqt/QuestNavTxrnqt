// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace QuestNav.Protos.Generated {

  /// <summary>Holder for reflection information generated from data.proto</summary>
  public static partial class DataReflection {

    #region Descriptor
    /// <summary>File descriptor for data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpkYXRhLnByb3RvEhRxdWVzdG5hdi5wcm90b3MuZGF0YRoQZ2VvbWV0cnkz",
            "ZC5wcm90byJuChlQcm90b2J1ZlF1ZXN0TmF2RnJhbWVEYXRhEhMKC2ZyYW1l",
            "X2NvdW50GAEgASgFEhEKCXRpbWVzdGFtcBgCIAEoARIpCgZwb3NlM2QYAyAB",
            "KAsyGS53cGkucHJvdG8uUHJvdG9idWZQb3NlM2QicAoaUHJvdG9idWZRdWVz",
            "dE5hdkRldmljZURhdGESHQoVdHJhY2tpbmdfbG9zdF9jb3VudGVyGAEgASgF",
            "EhoKEmN1cnJlbnRseV90cmFja2luZxgCIAEoCBIXCg9iYXR0ZXJ5X3BlcmNl",
            "bnQYAyABKAVCQwolZ2cucXVlc3RuYXYucXVlc3RuYXYucHJvdG9zLmdlbmVy",
            "YXRlZKoCGVF1ZXN0TmF2LlByb3Rvcy5HZW5lcmF0ZWRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Wpi.Proto.Geometry3DReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::QuestNav.Protos.Generated.ProtobufQuestNavFrameData), global::QuestNav.Protos.Generated.ProtobufQuestNavFrameData.Parser, new[]{ "FrameCount", "Timestamp", "Pose3D" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QuestNav.Protos.Generated.ProtobufQuestNavDeviceData), global::QuestNav.Protos.Generated.ProtobufQuestNavDeviceData.Parser, new[]{ "TrackingLostCounter", "CurrentlyTracking", "BatteryPercent" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// High-frequency tracking data sent from Quest to external systems.
  /// 
  /// This message contains the core tracking information that external systems
  /// (like robot code) need for real-time localization and navigation. It's sent
  /// at 100 Hz (every 10 milliseconds) to provide smooth, responsive tracking.
  /// 
  /// The data represents the Quest's position and orientation on the field,
  /// derived from visual-inertial odometry using the Quest's cameras and IMU sensors.
  /// 
  /// Coordinate System:
  /// - Uses WPILib field-relative coordinate system
  /// - Origin and axes depend on field setup and calibration
  /// - Pose represents the Quest's position; mounting offset to get robot position
  ///   is applied in end user code
  /// </summary>
  public sealed partial class ProtobufQuestNavFrameData : pb::IMessage<ProtobufQuestNavFrameData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtobufQuestNavFrameData> _parser = new pb::MessageParser<ProtobufQuestNavFrameData>(() => new ProtobufQuestNavFrameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProtobufQuestNavFrameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QuestNav.Protos.Generated.DataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufQuestNavFrameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufQuestNavFrameData(ProtobufQuestNavFrameData other) : this() {
      frameCount_ = other.frameCount_;
      timestamp_ = other.timestamp_;
      pose3D_ = other.pose3D_ != null ? other.pose3D_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufQuestNavFrameData Clone() {
      return new ProtobufQuestNavFrameData(this);
    }

    /// <summary>Field number for the "frame_count" field.</summary>
    public const int FrameCountFieldNumber = 1;
    private int frameCount_;
    /// <summary>
    ///*
    /// Sequential frame counter for this tracking session.
    /// 
    /// This counter increments with each frame processed by the Quest's tracking
    /// system. It can be used to:
    /// - Detect dropped messages
    /// - Calculate effective frame rate
    /// - Synchronize with other data streams
    /// 
    /// The counter resets to 0 when the QuestNav app starts and increments
    /// continuously during operation. Frame drops in transmission will create
    /// gaps in the sequence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrameCount {
      get { return frameCount_; }
      set {
        frameCount_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private double timestamp_;
    /// <summary>
    ///*
    /// Timestamp in seconds since QuestNav app startup.
    /// 
    /// This provides timing information for the tracking data, allowing external
    /// systems to:
    /// - Calculate data age and latency
    /// - Interpolate or extrapolate poses for prediction
    /// - Synchronize with other sensor data
    /// - Implement timeout detection
    /// 
    /// The timestamp is relative to app startup, not system time, to avoid
    /// clock synchronization issues between devices.
    /// 
    /// Resolution: Typically sub-millisecond precision
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "pose3d" field.</summary>
    public const int Pose3DFieldNumber = 3;
    private global::Wpi.Proto.ProtobufPose3d pose3D_;
    /// <summary>
    ///*
    /// Quest's 3D pose on the field in WPILib coordinates.
    /// 
    /// This represents the Quest's position and orientation as determined by
    /// the Quest's tracking system. The pose accounts for:
    /// - Coordinate system transformation to WPILib standard
    /// - Any calibration offsets applied
    /// 
    /// Note: This is the Quest's position; end user code applies mounting offset
    /// to get the robot's position.
    /// 
    /// Coordinate System Details:
    /// - X: Forward direction (towards opposing alliance)
    /// - Y: Left direction (when facing forward)
    /// - Z: Up direction
    /// - Yaw (Z): Counter-clockwise (right-handed) rotation around the Z axis
    /// - Pitch (Y): Counter-clockwise (right-handed) rotation around Y axis
    /// - Roll (X): Counter-clockwise (right-handed) rotation around the X axis
    /// - Units: meters for translation, radians for rotation
    /// 
    /// Accuracy depends on:
    /// - Environmental lighting and features
    /// - Quest tracking quality
    /// - Calibration accuracy
    /// - Time since last pose reset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Wpi.Proto.ProtobufPose3d Pose3D {
      get { return pose3D_; }
      set {
        pose3D_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProtobufQuestNavFrameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProtobufQuestNavFrameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameCount != other.FrameCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(Pose3D, other.Pose3D)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameCount != 0) hash ^= FrameCount.GetHashCode();
      if (Timestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Timestamp);
      if (pose3D_ != null) hash ^= Pose3D.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FrameCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameCount);
      }
      if (Timestamp != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Timestamp);
      }
      if (pose3D_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pose3D);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FrameCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameCount);
      }
      if (Timestamp != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Timestamp);
      }
      if (pose3D_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pose3D);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (FrameCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameCount);
      }
      if (Timestamp != 0D) {
        size += 1 + 8;
      }
      if (pose3D_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose3D);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProtobufQuestNavFrameData other) {
      if (other == null) {
        return;
      }
      if (other.FrameCount != 0) {
        FrameCount = other.FrameCount;
      }
      if (other.Timestamp != 0D) {
        Timestamp = other.Timestamp;
      }
      if (other.pose3D_ != null) {
        if (pose3D_ == null) {
          Pose3D = new global::Wpi.Proto.ProtobufPose3d();
        }
        Pose3D.MergeFrom(other.Pose3D);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FrameCount = input.ReadInt32();
            break;
          }
          case 17: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 26: {
            if (pose3D_ == null) {
              Pose3D = new global::Wpi.Proto.ProtobufPose3d();
            }
            input.ReadMessage(Pose3D);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FrameCount = input.ReadInt32();
            break;
          }
          case 17: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 26: {
            if (pose3D_ == null) {
              Pose3D = new global::Wpi.Proto.ProtobufPose3d();
            }
            input.ReadMessage(Pose3D);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Lower-frequency device status data sent from Quest to external systems.
  /// 
  /// This message contains device health and status information that doesn't need
  /// to be sent as frequently as tracking data. It's sent at 3 Hz (every 333 milliseconds)
  /// to provide monitoring and diagnostic information without consuming excessive
  /// bandwidth.
  /// 
  /// This data helps external systems:
  /// - Monitor Quest device health
  /// - Detect tracking system issues
  /// - Implement failsafe behaviors
  /// - Provide user feedback about system status
  /// 
  /// The information is useful for both autonomous operation and debugging/
  /// troubleshooting scenarios.
  /// </summary>
  public sealed partial class ProtobufQuestNavDeviceData : pb::IMessage<ProtobufQuestNavDeviceData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtobufQuestNavDeviceData> _parser = new pb::MessageParser<ProtobufQuestNavDeviceData>(() => new ProtobufQuestNavDeviceData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProtobufQuestNavDeviceData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QuestNav.Protos.Generated.DataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufQuestNavDeviceData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufQuestNavDeviceData(ProtobufQuestNavDeviceData other) : this() {
      trackingLostCounter_ = other.trackingLostCounter_;
      currentlyTracking_ = other.currentlyTracking_;
      batteryPercent_ = other.batteryPercent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufQuestNavDeviceData Clone() {
      return new ProtobufQuestNavDeviceData(this);
    }

    /// <summary>Field number for the "tracking_lost_counter" field.</summary>
    public const int TrackingLostCounterFieldNumber = 1;
    private int trackingLostCounter_;
    /// <summary>
    ///*
    /// Count of tracking loss events since app startup.
    /// 
    /// This counter increments each time the Quest's tracking system loses
    /// tracking after having established it. Tracking loss can occur due to:
    /// - Poor lighting conditions
    /// - Lack of visual features in environment
    /// - Rapid motion or acceleration
    /// - Occlusion of cameras
    /// - Hardware issues
    /// 
    /// A high or rapidly increasing counter may indicate:
    /// - Environmental issues (lighting, features)
    /// - Quest mounting problems (vibration, obstruction)
    /// - Hardware degradation
    /// 
    /// This metric helps assess tracking system reliability and can trigger
    /// alerts or fallback behaviors in robot code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TrackingLostCounter {
      get { return trackingLostCounter_; }
      set {
        trackingLostCounter_ = value;
      }
    }

    /// <summary>Field number for the "currently_tracking" field.</summary>
    public const int CurrentlyTrackingFieldNumber = 2;
    private bool currentlyTracking_;
    /// <summary>
    ///*
    /// Current tracking status of the Quest device.
    /// 
    /// true:  Quest is actively tracking and pose data is reliable
    /// false: Quest has lost tracking and pose data should not be trusted
    /// 
    /// When tracking is lost:
    /// - Pose data becomes stale and unreliable
    /// - Robot should switch to alternative localization methods
    /// - Movement should be limited or stopped for safety
    /// 
    /// Tracking can be recovered by:
    /// - Improving lighting conditions
    /// - Moving to area with more visual features
    /// - Reducing motion to allow system to re-initialize
    /// - Performing pose reset when tracking recovers
    /// 
    /// External systems should monitor this field and implement appropriate
    /// fallback behaviors when tracking is lost.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CurrentlyTracking {
      get { return currentlyTracking_; }
      set {
        currentlyTracking_ = value;
      }
    }

    /// <summary>Field number for the "battery_percent" field.</summary>
    public const int BatteryPercentFieldNumber = 3;
    private int batteryPercent_;
    /// <summary>
    ///*
    /// Quest device battery level as a percentage (0-100).
    /// 
    /// This provides the current battery charge level of the Quest headset,
    /// allowing external systems to:
    /// - Monitor power status during operation
    /// - Implement low-battery warnings or behaviors
    /// - Plan operation duration and charging needs
    /// - Trigger graceful shutdown procedures
    /// 
    /// Battery Level Guidelines:
    /// - 100%: Fully charged
    /// - 50-100%: Normal operation
    /// - 20-50%: Consider charging soon
    /// - 10-20%: Low battery warning recommended
    /// - 0-10%: Critical - plan immediate shutdown/charging
    /// 
    /// Note: Battery drain rate depends on:
    /// - Processing load (tracking complexity)
    /// - Display usage (if any)
    /// - Wireless communication activity
    /// - Environmental temperature
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BatteryPercent {
      get { return batteryPercent_; }
      set {
        batteryPercent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProtobufQuestNavDeviceData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProtobufQuestNavDeviceData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TrackingLostCounter != other.TrackingLostCounter) return false;
      if (CurrentlyTracking != other.CurrentlyTracking) return false;
      if (BatteryPercent != other.BatteryPercent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TrackingLostCounter != 0) hash ^= TrackingLostCounter.GetHashCode();
      if (CurrentlyTracking != false) hash ^= CurrentlyTracking.GetHashCode();
      if (BatteryPercent != 0) hash ^= BatteryPercent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TrackingLostCounter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TrackingLostCounter);
      }
      if (CurrentlyTracking != false) {
        output.WriteRawTag(16);
        output.WriteBool(CurrentlyTracking);
      }
      if (BatteryPercent != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BatteryPercent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TrackingLostCounter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TrackingLostCounter);
      }
      if (CurrentlyTracking != false) {
        output.WriteRawTag(16);
        output.WriteBool(CurrentlyTracking);
      }
      if (BatteryPercent != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BatteryPercent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TrackingLostCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrackingLostCounter);
      }
      if (CurrentlyTracking != false) {
        size += 1 + 1;
      }
      if (BatteryPercent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatteryPercent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProtobufQuestNavDeviceData other) {
      if (other == null) {
        return;
      }
      if (other.TrackingLostCounter != 0) {
        TrackingLostCounter = other.TrackingLostCounter;
      }
      if (other.CurrentlyTracking != false) {
        CurrentlyTracking = other.CurrentlyTracking;
      }
      if (other.BatteryPercent != 0) {
        BatteryPercent = other.BatteryPercent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TrackingLostCounter = input.ReadInt32();
            break;
          }
          case 16: {
            CurrentlyTracking = input.ReadBool();
            break;
          }
          case 24: {
            BatteryPercent = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TrackingLostCounter = input.ReadInt32();
            break;
          }
          case 16: {
            CurrentlyTracking = input.ReadBool();
            break;
          }
          case 24: {
            BatteryPercent = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
